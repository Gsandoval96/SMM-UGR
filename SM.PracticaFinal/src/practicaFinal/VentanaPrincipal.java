/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package practicaFinal;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.Transparency;
import java.awt.color.ColorSpace;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ColorConvertOp;
import java.awt.image.ColorModel;
import java.awt.image.ComponentColorModel;
import java.awt.image.ConvolveOp;
import java.awt.image.DataBuffer;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.awt.image.RescaleOp;
import java.awt.image.WritableRaster;
import java.io.File;
import java.util.Arrays;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import sm.gss.eventos.LienzoAdapter;
import sm.gss.eventos.LienzoEvent;
import sm.gss.graficos.TipoRelleno;
import sm.gss.graficos.TipoTrazo;
import sm.gss.graficos.Trazo;
import sm.gss.iu.DrawMode;
import sm.gss.iu.LienzoImagen2D;
import sm.image.KernelProducer;
import sm.image.LookupTableProducer;
import sm.sound.SMClipPlayer;
import sm.sound.SMPlayer;
import sm.sound.SMSoundRecorder;

/**
 *
 * @author Guillermo Sandoval Schmidt
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public VentanaPrincipal() {
        initComponents();
        jList1.setModel(new DefaultListModel());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        GrupoFormas = new javax.swing.ButtonGroup();
        GrupoColoresPrincipal = new javax.swing.ButtonGroup();
        GrupoColoresSecundario = new javax.swing.ButtonGroup();
        GrupoRelleno = new javax.swing.ButtonGroup();
        GrupoTrazo = new javax.swing.ButtonGroup();
        grupoSinusoidal = new javax.swing.ButtonGroup();
        GrupoDegradado = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel31 = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        jPanel15 = new javax.swing.JPanel();
        botonLinea = new javax.swing.JToggleButton();
        botonRectangulo = new javax.swing.JToggleButton();
        botonOvalo = new javax.swing.JToggleButton();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        jPanel16 = new javax.swing.JPanel();
        jPanel28 = new javax.swing.JPanel();
        botonSinRelleno = new javax.swing.JToggleButton();
        botonRelleno = new javax.swing.JToggleButton();
        botonGradiente = new javax.swing.JToggleButton();
        jPanel25 = new javax.swing.JPanel();
        botonDV = new javax.swing.JRadioButton();
        botonDH = new javax.swing.JRadioButton();
        botonDD = new javax.swing.JRadioButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        jPanel17 = new javax.swing.JPanel();
        botonContinua = new javax.swing.JToggleButton();
        botonDiscontinua = new javax.swing.JToggleButton();
        botonPuntos = new javax.swing.JToggleButton();
        jPanel22 = new javax.swing.JPanel();
        jPanel18 = new javax.swing.JPanel();
        spinnerGrosor = new javax.swing.JSpinner();
        jPanel20 = new javax.swing.JPanel();
        botonAlisar = new javax.swing.JToggleButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        jPanel19 = new javax.swing.JPanel();
        sliderTransparencia = new javax.swing.JSlider();
        jSeparator6 = new javax.swing.JToolBar.Separator();
        jPanel12 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        colorNegro = new javax.swing.JToggleButton();
        colorRojo = new javax.swing.JToggleButton();
        colorAzul = new javax.swing.JToggleButton();
        colorBlanco = new javax.swing.JToggleButton();
        colorAmarillo = new javax.swing.JToggleButton();
        colorVerde = new javax.swing.JToggleButton();
        jPanel13 = new javax.swing.JPanel();
        colorNegro1 = new javax.swing.JToggleButton();
        colorRojo1 = new javax.swing.JToggleButton();
        colorAzul1 = new javax.swing.JToggleButton();
        colorBlanco1 = new javax.swing.JToggleButton();
        colorAmarillo1 = new javax.swing.JToggleButton();
        colorVerde1 = new javax.swing.JToggleButton();
        jPanel27 = new javax.swing.JPanel();
        jPanel26 = new javax.swing.JPanel();
        colorTrazoActual = new javax.swing.JToggleButton();
        jSeparator9 = new javax.swing.JSeparator();
        textTR = new javax.swing.JTextField();
        textTG = new javax.swing.JTextField();
        textTB = new javax.swing.JTextField();
        jPanel24 = new javax.swing.JPanel();
        colorRellenoActual = new javax.swing.JToggleButton();
        jSeparator5 = new javax.swing.JSeparator();
        textRR = new javax.swing.JTextField();
        textRG = new javax.swing.JTextField();
        textRB = new javax.swing.JTextField();
        jToolBar2 = new javax.swing.JToolBar();
        jPanel4 = new javax.swing.JPanel();
        botonNormal = new javax.swing.JButton();
        botonIluminar = new javax.swing.JButton();
        botonOscurecer = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jSlider1 = new javax.swing.JSlider();
        jSeparator7 = new javax.swing.JToolBar.Separator();
        jPanel7 = new javax.swing.JPanel();
        botonNegativo = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jPanel8 = new javax.swing.JPanel();
        botonSinusoidal = new javax.swing.JButton();
        jPanel14 = new javax.swing.JPanel();
        botonSeno = new javax.swing.JRadioButton();
        botonCoseno = new javax.swing.JRadioButton();
        botonCosSin = new javax.swing.JRadioButton();
        jPanel11 = new javax.swing.JPanel();
        botonBandas = new javax.swing.JButton();
        jComboBox2 = new javax.swing.JComboBox<>();
        jSeparator8 = new javax.swing.JToolBar.Separator();
        jPanel9 = new javax.swing.JPanel();
        jSlider2 = new javax.swing.JSlider();
        jPanel21 = new javax.swing.JPanel();
        boton90 = new javax.swing.JButton();
        boton180 = new javax.swing.JButton();
        boton270 = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        botonAumentar = new javax.swing.JButton();
        botonReducir = new javax.swing.JButton();
        jPanel30 = new javax.swing.JPanel();
        botonDuplicado = new javax.swing.JButton();
        escritorio = new javax.swing.JDesktopPane();
        jPanel29 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jPanel23 = new javax.swing.JPanel();
        botonMover = new javax.swing.JButton();
        botonBorrar = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jToolBar4 = new javax.swing.JToolBar();
        botonPlay = new javax.swing.JButton();
        botonStop = new javax.swing.JButton();
        listaReproduccion = new javax.swing.JComboBox<>();
        botonRecord = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        botonCamara = new javax.swing.JToggleButton();
        botonCaptura = new javax.swing.JToggleButton();
        jPanel5 = new javax.swing.JPanel();
        nombreHerramienta = new javax.swing.JLabel();
        barraMenu = new javax.swing.JMenuBar();
        menuArchivo = new javax.swing.JMenu();
        menuItemNuevo = new javax.swing.JMenuItem();
        menuItemAbrir = new javax.swing.JMenuItem();
        menuItemGuardar = new javax.swing.JMenuItem();
        menuVer = new javax.swing.JMenu();
        menuStatusBar = new javax.swing.JCheckBoxMenuItem();
        menuLista = new javax.swing.JCheckBoxMenuItem();
        menuGraficos = new javax.swing.JCheckBoxMenuItem();
        menuImagen = new javax.swing.JCheckBoxMenuItem();
        menuAudio = new javax.swing.JCheckBoxMenuItem();
        menuAyuda = new javax.swing.JMenu();
        menuAcerca = new javax.swing.JMenuItem();

        FormListener formListener = new FormListener();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SMM_Final - Guillermo Sandoval Schmidt");

        jPanel1.setBorder(null);
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel31.setLayout(new javax.swing.BoxLayout(jPanel31, javax.swing.BoxLayout.LINE_AXIS));

        jToolBar1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jToolBar1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jToolBar1.setRollover(true);
        jToolBar1.setMinimumSize(new java.awt.Dimension(700, 84));
        jToolBar1.setPreferredSize(new java.awt.Dimension(200, 770));

        jPanel15.setBorder(javax.swing.BorderFactory.createTitledBorder("Formas"));
        jPanel15.setPreferredSize(new java.awt.Dimension(195, 85));

        GrupoFormas.add(botonLinea);
        botonLinea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/divide-mathematical-sign.png"))); // NOI18N
        botonLinea.setSelected(true);
        botonLinea.setToolTipText("Dibuja líneas");
        botonLinea.setFocusable(false);
        botonLinea.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonLinea.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonLinea.addActionListener(formListener);
        jPanel15.add(botonLinea);

        GrupoFormas.add(botonRectangulo);
        botonRectangulo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/check-box-empty.png"))); // NOI18N
        botonRectangulo.setToolTipText("Dibuja rectángulos");
        botonRectangulo.setFocusable(false);
        botonRectangulo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonRectangulo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonRectangulo.addActionListener(formListener);
        jPanel15.add(botonRectangulo);

        GrupoFormas.add(botonOvalo);
        botonOvalo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/circle.png"))); // NOI18N
        botonOvalo.setToolTipText("Dibuja elipses");
        botonOvalo.setFocusable(false);
        botonOvalo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonOvalo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonOvalo.addActionListener(formListener);
        jPanel15.add(botonOvalo);

        jToolBar1.add(jPanel15);
        jToolBar1.add(jSeparator4);

        jPanel16.setBorder(javax.swing.BorderFactory.createTitledBorder("Relleno"));
        jPanel16.setPreferredSize(new java.awt.Dimension(195, 115));
        jPanel16.setLayout(new javax.swing.BoxLayout(jPanel16, javax.swing.BoxLayout.LINE_AXIS));

        jPanel28.setLayout(new javax.swing.BoxLayout(jPanel28, javax.swing.BoxLayout.Y_AXIS));

        GrupoRelleno.add(botonSinRelleno);
        botonSinRelleno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/paint-bucket_1.png"))); // NOI18N
        botonSinRelleno.setSelected(true);
        botonSinRelleno.setToolTipText("Sin relleno");
        botonSinRelleno.setFocusable(false);
        botonSinRelleno.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonSinRelleno.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonSinRelleno.addActionListener(formListener);
        jPanel28.add(botonSinRelleno);

        GrupoRelleno.add(botonRelleno);
        botonRelleno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/paint-bucket (1).png"))); // NOI18N
        botonRelleno.setToolTipText("Relleno liso");
        botonRelleno.setFocusable(false);
        botonRelleno.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonRelleno.setMinimumSize(new java.awt.Dimension(34, 34));
        botonRelleno.setPreferredSize(new java.awt.Dimension(34, 34));
        botonRelleno.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonRelleno.addActionListener(formListener);
        jPanel28.add(botonRelleno);

        jPanel16.add(jPanel28);

        GrupoRelleno.add(botonGradiente);
        botonGradiente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/gradient.png"))); // NOI18N
        botonGradiente.setToolTipText("Relleno con gradiente");
        botonGradiente.setFocusable(false);
        botonGradiente.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonGradiente.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonGradiente.addActionListener(formListener);
        jPanel16.add(botonGradiente);

        jPanel25.setLayout(new javax.swing.BoxLayout(jPanel25, javax.swing.BoxLayout.Y_AXIS));

        GrupoDegradado.add(botonDV);
        botonDV.setSelected(true);
        botonDV.setText("Vert.");
        botonDV.addActionListener(formListener);
        jPanel25.add(botonDV);

        GrupoDegradado.add(botonDH);
        botonDH.setText("Horiz.");
        botonDH.addActionListener(formListener);
        jPanel25.add(botonDH);

        GrupoDegradado.add(botonDD);
        botonDD.setText("Diag.");
        botonDD.addActionListener(formListener);
        jPanel25.add(botonDD);

        jPanel16.add(jPanel25);

        jToolBar1.add(jPanel16);
        jToolBar1.add(jSeparator1);

        jPanel17.setBorder(javax.swing.BorderFactory.createTitledBorder("Tipo trazo"));
        jPanel17.setPreferredSize(new java.awt.Dimension(195, 85));

        GrupoTrazo.add(botonContinua);
        botonContinua.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/divide-mathematical-sign.png"))); // NOI18N
        botonContinua.setSelected(true);
        botonContinua.setToolTipText("Trazo continuo");
        botonContinua.setFocusable(false);
        botonContinua.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonContinua.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonContinua.addActionListener(formListener);
        jPanel17.add(botonContinua);

        GrupoTrazo.add(botonDiscontinua);
        botonDiscontinua.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/5039-512.png"))); // NOI18N
        botonDiscontinua.setToolTipText("Trazo discontinuo (líneas)");
        botonDiscontinua.setFocusable(false);
        botonDiscontinua.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonDiscontinua.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonDiscontinua.addActionListener(formListener);
        jPanel17.add(botonDiscontinua);

        GrupoTrazo.add(botonPuntos);
        botonPuntos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/ellipsis.png"))); // NOI18N
        botonPuntos.setToolTipText("Trazo discontinuo (puntos)");
        botonPuntos.setFocusable(false);
        botonPuntos.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonPuntos.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonPuntos.addActionListener(formListener);
        jPanel17.add(botonPuntos);

        jToolBar1.add(jPanel17);

        jPanel18.setBorder(javax.swing.BorderFactory.createTitledBorder("Grosor"));
        jPanel18.setPreferredSize(new java.awt.Dimension(85, 85));

        spinnerGrosor.setModel(new javax.swing.SpinnerNumberModel(1, 1, 20, 1));
        spinnerGrosor.setToolTipText("Grosor del trazo (entre 1 y 10)");
        spinnerGrosor.addChangeListener(formListener);
        jPanel18.add(spinnerGrosor);

        jPanel22.add(jPanel18);

        jPanel20.setBorder(javax.swing.BorderFactory.createTitledBorder("Suavizado"));
        jPanel20.setPreferredSize(new java.awt.Dimension(85, 85));

        botonAlisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/feather.png"))); // NOI18N
        botonAlisar.setToolTipText("Alisado");
        botonAlisar.setFocusable(false);
        botonAlisar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonAlisar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonAlisar.addActionListener(formListener);
        jPanel20.add(botonAlisar);

        jPanel22.add(jPanel20);

        jToolBar1.add(jPanel22);
        jToolBar1.add(jSeparator2);

        jPanel19.setBorder(javax.swing.BorderFactory.createTitledBorder("Opacidad"));
        jPanel19.setPreferredSize(new java.awt.Dimension(195, 85));

        sliderTransparencia.setMajorTickSpacing(25);
        sliderTransparencia.setPaintTicks(true);
        sliderTransparencia.setToolTipText("Opacidad (entre 0 y 100)");
        sliderTransparencia.setValue(100);
        sliderTransparencia.setPreferredSize(new java.awt.Dimension(125, 39));
        sliderTransparencia.addChangeListener(formListener);
        jPanel19.add(sliderTransparencia);

        jToolBar1.add(jPanel19);
        jToolBar1.add(jSeparator6);

        jPanel12.setLayout(new java.awt.GridLayout(1, 0));

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Trazo"));
        jPanel3.setToolTipText("Color del borde");
        jPanel3.setPreferredSize(new java.awt.Dimension(110, 80));
        jPanel3.setLayout(new java.awt.GridLayout(2, 3, 4, 4));

        colorNegro.setBackground(new java.awt.Color(1, 1, 1));
        GrupoColoresPrincipal.add(colorNegro);
        colorNegro.setSelected(true);
        colorNegro.setBorder(null);
        colorNegro.setPreferredSize(new java.awt.Dimension(35, 25));
        colorNegro.addActionListener(formListener);
        jPanel3.add(colorNegro);

        colorRojo.setBackground(new java.awt.Color(255, 0, 0));
        GrupoColoresPrincipal.add(colorRojo);
        colorRojo.setBorder(null);
        colorRojo.setPreferredSize(new java.awt.Dimension(35, 25));
        colorRojo.addActionListener(formListener);
        jPanel3.add(colorRojo);

        colorAzul.setBackground(new java.awt.Color(0, 0, 255));
        GrupoColoresPrincipal.add(colorAzul);
        colorAzul.setBorder(null);
        colorAzul.setPreferredSize(new java.awt.Dimension(35, 25));
        colorAzul.addActionListener(formListener);
        jPanel3.add(colorAzul);

        colorBlanco.setBackground(new java.awt.Color(255, 255, 255));
        GrupoColoresPrincipal.add(colorBlanco);
        colorBlanco.setBorder(null);
        colorBlanco.setPreferredSize(new java.awt.Dimension(35, 25));
        colorBlanco.addActionListener(formListener);
        jPanel3.add(colorBlanco);

        colorAmarillo.setBackground(new java.awt.Color(255, 255, 0));
        GrupoColoresPrincipal.add(colorAmarillo);
        colorAmarillo.setBorder(null);
        colorAmarillo.setPreferredSize(new java.awt.Dimension(35, 25));
        colorAmarillo.addActionListener(formListener);
        jPanel3.add(colorAmarillo);

        colorVerde.setBackground(new java.awt.Color(0, 255, 0));
        GrupoColoresPrincipal.add(colorVerde);
        colorVerde.setBorder(null);
        colorVerde.setPreferredSize(new java.awt.Dimension(35, 25));
        colorVerde.addActionListener(formListener);
        jPanel3.add(colorVerde);

        jPanel12.add(jPanel3);

        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder("Relleno"));
        jPanel13.setToolTipText("Color de relleno");
        jPanel13.setPreferredSize(new java.awt.Dimension(110, 80));
        jPanel13.setLayout(new java.awt.GridLayout(2, 3, 4, 4));

        colorNegro1.setBackground(new java.awt.Color(1, 1, 1));
        GrupoColoresSecundario.add(colorNegro1);
        colorNegro1.setSelected(true);
        colorNegro1.setBorder(null);
        colorNegro1.setPreferredSize(new java.awt.Dimension(30, 25));
        colorNegro1.addActionListener(formListener);
        jPanel13.add(colorNegro1);

        colorRojo1.setBackground(new java.awt.Color(255, 0, 0));
        GrupoColoresSecundario.add(colorRojo1);
        colorRojo1.setBorder(null);
        colorRojo1.setPreferredSize(new java.awt.Dimension(30, 25));
        colorRojo1.addActionListener(formListener);
        jPanel13.add(colorRojo1);

        colorAzul1.setBackground(new java.awt.Color(0, 0, 255));
        GrupoColoresSecundario.add(colorAzul1);
        colorAzul1.setBorder(null);
        colorAzul1.setPreferredSize(new java.awt.Dimension(30, 25));
        colorAzul1.addActionListener(formListener);
        jPanel13.add(colorAzul1);

        colorBlanco1.setBackground(new java.awt.Color(255, 255, 255));
        GrupoColoresSecundario.add(colorBlanco1);
        colorBlanco1.setBorder(null);
        colorBlanco1.addActionListener(formListener);
        jPanel13.add(colorBlanco1);

        colorAmarillo1.setBackground(new java.awt.Color(255, 255, 0));
        GrupoColoresSecundario.add(colorAmarillo1);
        colorAmarillo1.setBorder(null);
        colorAmarillo1.addActionListener(formListener);
        jPanel13.add(colorAmarillo1);

        colorVerde1.setBackground(new java.awt.Color(0, 255, 0));
        GrupoColoresSecundario.add(colorVerde1);
        colorVerde1.setBorder(null);
        colorVerde1.setPreferredSize(new java.awt.Dimension(30, 25));
        colorVerde1.addActionListener(formListener);
        jPanel13.add(colorVerde1);

        jPanel12.add(jPanel13);

        jToolBar1.add(jPanel12);

        jPanel27.setBorder(javax.swing.BorderFactory.createTitledBorder("RGB"));
        jPanel27.setToolTipText("");
        jPanel27.setLayout(new java.awt.BorderLayout());

        jPanel26.setPreferredSize(new java.awt.Dimension(195, 50));
        jPanel26.setLayout(new javax.swing.BoxLayout(jPanel26, javax.swing.BoxLayout.LINE_AXIS));

        colorTrazoActual.setBackground(new java.awt.Color(0, 0, 0));
        GrupoColoresPrincipal.add(colorTrazoActual);
        colorTrazoActual.setToolTipText("Color de Trazo actual");
        colorTrazoActual.setFocusable(false);
        colorTrazoActual.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        colorTrazoActual.setMaximumSize(new java.awt.Dimension(30, 30));
        colorTrazoActual.setPreferredSize(new java.awt.Dimension(30, 30));
        colorTrazoActual.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        colorTrazoActual.addActionListener(formListener);
        jPanel26.add(colorTrazoActual);

        jSeparator9.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator9.setMaximumSize(new java.awt.Dimension(5, 30));
        jSeparator9.setPreferredSize(new java.awt.Dimension(5, 30));
        jPanel26.add(jSeparator9);

        textTR.setText("0");
        textTR.setToolTipText("Parte \"R\" del trazo (entre 0 y 255)");
        textTR.setMaximumSize(new java.awt.Dimension(50, 30));
        textTR.setPreferredSize(new java.awt.Dimension(20, 20));
        textTR.addActionListener(formListener);
        jPanel26.add(textTR);

        textTG.setText("0");
        textTG.setToolTipText("Parte \"G\" del trazo (entre 0 y 255)");
        textTG.setMaximumSize(new java.awt.Dimension(50, 30));
        textTG.setPreferredSize(new java.awt.Dimension(20, 20));
        textTG.addActionListener(formListener);
        jPanel26.add(textTG);

        textTB.setText("0");
        textTB.setToolTipText("Parte \"B\" del trazo (entre 0 y 255)");
        textTB.setMaximumSize(new java.awt.Dimension(50, 30));
        textTB.setPreferredSize(new java.awt.Dimension(20, 20));
        textTB.addActionListener(formListener);
        jPanel26.add(textTB);

        jPanel27.add(jPanel26, java.awt.BorderLayout.PAGE_START);

        jPanel24.setPreferredSize(new java.awt.Dimension(195, 50));
        jPanel24.setLayout(new javax.swing.BoxLayout(jPanel24, javax.swing.BoxLayout.LINE_AXIS));

        colorRellenoActual.setBackground(new java.awt.Color(0, 0, 0));
        GrupoColoresSecundario.add(colorRellenoActual);
        colorRellenoActual.setToolTipText("Color de Relleno actual");
        colorRellenoActual.setFocusable(false);
        colorRellenoActual.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        colorRellenoActual.setMaximumSize(new java.awt.Dimension(30, 30));
        colorRellenoActual.setPreferredSize(new java.awt.Dimension(30, 30));
        colorRellenoActual.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        colorRellenoActual.addActionListener(formListener);
        jPanel24.add(colorRellenoActual);

        jSeparator5.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator5.setMaximumSize(new java.awt.Dimension(5, 30));
        jSeparator5.setPreferredSize(new java.awt.Dimension(5, 30));
        jPanel24.add(jSeparator5);

        textRR.setText("0");
        textRR.setToolTipText("Parte \"R\" del relleno (entre 0 y 255)");
        textRR.setMaximumSize(new java.awt.Dimension(50, 30));
        textRR.setPreferredSize(new java.awt.Dimension(20, 20));
        textRR.addActionListener(formListener);
        jPanel24.add(textRR);

        textRG.setText("0");
        textRG.setToolTipText("Parte \"G\" del relleno (entre 0 y 255)");
        textRG.setMaximumSize(new java.awt.Dimension(50, 30));
        textRG.setPreferredSize(new java.awt.Dimension(20, 20));
        textRG.addActionListener(formListener);
        jPanel24.add(textRG);

        textRB.setText("0");
        textRB.setToolTipText("Parte \"B\" del relleno (entre 0 y 255)");
        textRB.setMaximumSize(new java.awt.Dimension(50, 30));
        textRB.setPreferredSize(new java.awt.Dimension(20, 20));
        textRB.addActionListener(formListener);
        jPanel24.add(textRB);

        jPanel27.add(jPanel24, java.awt.BorderLayout.CENTER);

        jToolBar1.add(jPanel27);

        jPanel31.add(jToolBar1);

        jToolBar2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jToolBar2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jToolBar2.setRollover(true);
        jToolBar2.setPreferredSize(new java.awt.Dimension(200, 770));

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Contraste"));
        jPanel4.setPreferredSize(new java.awt.Dimension(195, 85));

        botonNormal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/contrast.png"))); // NOI18N
        botonNormal.setToolTipText("Contraste normal");
        botonNormal.setFocusable(false);
        botonNormal.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonNormal.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonNormal.addActionListener(formListener);
        jPanel4.add(botonNormal);

        botonIluminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/brightness.png"))); // NOI18N
        botonIluminar.setToolTipText("Contraste claro");
        botonIluminar.setFocusable(false);
        botonIluminar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonIluminar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonIluminar.addActionListener(formListener);
        jPanel4.add(botonIluminar);

        botonOscurecer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/brightness (1).png"))); // NOI18N
        botonOscurecer.setToolTipText("Contraste oscuro");
        botonOscurecer.setFocusable(false);
        botonOscurecer.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonOscurecer.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonOscurecer.addActionListener(formListener);
        jPanel4.add(botonOscurecer);

        jToolBar2.add(jPanel4);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Brillo"));
        jPanel6.setPreferredSize(new java.awt.Dimension(195, 85));

        jSlider1.setMajorTickSpacing(50);
        jSlider1.setMaximum(255);
        jSlider1.setMinimum(-255);
        jSlider1.setPaintTicks(true);
        jSlider1.setToolTipText("Brillo (entre -255 y 255)");
        jSlider1.setValue(0);
        jSlider1.setPreferredSize(new java.awt.Dimension(150, 47));
        jSlider1.addChangeListener(formListener);
        jSlider1.addFocusListener(formListener);
        jPanel6.add(jSlider1);

        jToolBar2.add(jPanel6);
        jToolBar2.add(jSeparator7);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Filtro"));
        jPanel7.setPreferredSize(new java.awt.Dimension(195, 75));
        jPanel7.setLayout(new javax.swing.BoxLayout(jPanel7, javax.swing.BoxLayout.LINE_AXIS));

        botonNegativo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/invert-colors-button (1).png"))); // NOI18N
        botonNegativo.setToolTipText("Cambia a negativo la imagen");
        botonNegativo.addActionListener(formListener);
        jPanel7.add(botonNegativo);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Media", "Binomial", "Enfoque", "Relieve", "Frontera", "Media 5x5", "Media 7x7" }));
        jComboBox1.setToolTipText("Tipos de filtro");
        jComboBox1.setMinimumSize(new java.awt.Dimension(110, 30));
        jComboBox1.setPreferredSize(new java.awt.Dimension(110, 30));
        jComboBox1.addActionListener(formListener);
        jPanel7.add(jComboBox1);

        jToolBar2.add(jPanel7);

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Sinusoidal"));
        jPanel8.setPreferredSize(new java.awt.Dimension(195, 105));

        botonSinusoidal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/sinusoid.png"))); // NOI18N
        botonSinusoidal.setToolTipText("Aplica la sinusoidal seleccionada");
        botonSinusoidal.setFocusable(false);
        botonSinusoidal.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonSinusoidal.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonSinusoidal.addActionListener(formListener);
        jPanel8.add(botonSinusoidal);

        jPanel14.setLayout(new javax.swing.BoxLayout(jPanel14, javax.swing.BoxLayout.Y_AXIS));

        grupoSinusoidal.add(botonSeno);
        botonSeno.setSelected(true);
        botonSeno.setText("Seno");
        jPanel14.add(botonSeno);

        grupoSinusoidal.add(botonCoseno);
        botonCoseno.setText("Coseno");
        jPanel14.add(botonCoseno);

        grupoSinusoidal.add(botonCosSin);
        botonCosSin.setText("Cos*Sin");
        jPanel14.add(botonCosSin);

        jPanel8.add(jPanel14);

        jToolBar2.add(jPanel8);

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("Croma"));
        jPanel11.setPreferredSize(new java.awt.Dimension(195, 85));

        botonBandas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/red-green-blue-three-rgb-circles-symbol.png"))); // NOI18N
        botonBandas.setToolTipText("Divide la imagen en el espectro RGB");
        botonBandas.addActionListener(formListener);
        jPanel11.add(botonBandas);

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "RGB", "YCC", "GREY" }));
        jComboBox2.setToolTipText("Croma de la imagen");
        jComboBox2.setPreferredSize(new java.awt.Dimension(71, 34));
        jComboBox2.addActionListener(formListener);
        jPanel11.add(jComboBox2);

        jToolBar2.add(jPanel11);
        jToolBar2.add(jSeparator8);

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("Rotación"));
        jPanel9.setPreferredSize(new java.awt.Dimension(195, 125));
        jPanel9.setLayout(new java.awt.BorderLayout());

        jSlider2.setMajorTickSpacing(90);
        jSlider2.setMaximum(360);
        jSlider2.setPaintTicks(true);
        jSlider2.setToolTipText("Rotar la imagen manualmente");
        jSlider2.setValue(0);
        jSlider2.setMinimumSize(new java.awt.Dimension(22, 30));
        jSlider2.setPreferredSize(new java.awt.Dimension(150, 30));
        jSlider2.addChangeListener(formListener);
        jSlider2.addFocusListener(formListener);
        jPanel9.add(jSlider2, java.awt.BorderLayout.CENTER);

        boton90.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rotacion90.png"))); // NOI18N
        boton90.setToolTipText("Rotar la imagen 90 grados");
        boton90.addActionListener(formListener);
        jPanel21.add(boton90);

        boton180.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rotacion180.png"))); // NOI18N
        boton180.setToolTipText("Rotar la imagen 180 grados");
        boton180.addActionListener(formListener);
        jPanel21.add(boton180);

        boton270.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rotacion270.png"))); // NOI18N
        boton270.setToolTipText("Rotar la imagen 270 grados");
        boton270.addActionListener(formListener);
        jPanel21.add(boton270);

        jPanel9.add(jPanel21, java.awt.BorderLayout.SOUTH);

        jToolBar2.add(jPanel9);

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder("Escala"));
        jPanel10.setPreferredSize(new java.awt.Dimension(195, 85));

        botonAumentar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/add-button-inside-black-circle.png"))); // NOI18N
        botonAumentar.setToolTipText("Aumenta el zoom");
        botonAumentar.addActionListener(formListener);
        jPanel10.add(botonAumentar);

        botonReducir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/minus-symbol-inside-a-circle.png"))); // NOI18N
        botonReducir.setToolTipText("Disminuye el zoom");
        botonReducir.addActionListener(formListener);
        jPanel10.add(botonReducir);

        jToolBar2.add(jPanel10);

        jPanel30.setBorder(javax.swing.BorderFactory.createTitledBorder("Duplicado"));
        jPanel30.setPreferredSize(new java.awt.Dimension(195, 85));

        botonDuplicado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/duplicate-photo (1).png"))); // NOI18N
        botonDuplicado.setToolTipText("Duplica la imagen");
        botonDuplicado.addActionListener(formListener);
        jPanel30.add(botonDuplicado);

        jToolBar2.add(jPanel30);

        jPanel31.add(jToolBar2);

        escritorio.setBackground(new java.awt.Color(254, 254, 254));
        escritorio.setPreferredSize(new java.awt.Dimension(720, 512));
        jPanel31.add(escritorio);

        jPanel29.setBorder(javax.swing.BorderFactory.createTitledBorder("Lista figuras"));
        jPanel29.setMinimumSize(new java.awt.Dimension(150, 155));
        jPanel29.setPreferredSize(new java.awt.Dimension(150, 750));
        jPanel29.setLayout(new java.awt.BorderLayout());

        jList1.addListSelectionListener(formListener);
        jScrollPane1.setViewportView(jList1);

        jPanel29.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel23.setBorder(javax.swing.BorderFactory.createTitledBorder("Mover y borrar"));

        botonMover.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/move.png"))); // NOI18N
        botonMover.setPreferredSize(new java.awt.Dimension(40, 34));
        botonMover.addActionListener(formListener);
        jPanel23.add(botonMover);

        botonBorrar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rubbish-bin (1).png"))); // NOI18N
        botonBorrar.setMaximumSize(new java.awt.Dimension(34, 34));
        botonBorrar.setMinimumSize(new java.awt.Dimension(34, 34));
        botonBorrar.setPreferredSize(new java.awt.Dimension(40, 34));
        botonBorrar.addActionListener(formListener);
        jPanel23.add(botonBorrar);

        jPanel29.add(jPanel23, java.awt.BorderLayout.PAGE_END);

        jPanel31.add(jPanel29);

        jPanel1.add(jPanel31, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jToolBar4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jToolBar4.setRollover(true);

        botonPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/play-button.png"))); // NOI18N
        botonPlay.setToolTipText("Reproduce audio/vídeo");
        botonPlay.setFocusable(false);
        botonPlay.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonPlay.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonPlay.addActionListener(formListener);
        jToolBar4.add(botonPlay);

        botonStop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/stop_1.png"))); // NOI18N
        botonStop.setToolTipText("Para audio/vídeo/grabación");
        botonStop.setFocusable(false);
        botonStop.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonStop.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonStop.addActionListener(formListener);
        jToolBar4.add(botonStop);

        listaReproduccion.setToolTipText("Lista de reproducción");
        listaReproduccion.setPreferredSize(new java.awt.Dimension(150, 26));
        jToolBar4.add(listaReproduccion);

        botonRecord.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/microphone.png"))); // NOI18N
        botonRecord.setToolTipText("Graba un audio");
        botonRecord.setFocusable(false);
        botonRecord.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonRecord.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonRecord.addActionListener(formListener);
        jToolBar4.add(botonRecord);
        jToolBar4.add(jSeparator3);

        botonCamara.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/webcam.png"))); // NOI18N
        botonCamara.setToolTipText("Enciende la webcam");
        botonCamara.setFocusable(false);
        botonCamara.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonCamara.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonCamara.addActionListener(formListener);
        jToolBar4.add(botonCamara);

        botonCaptura.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/polaroid.png"))); // NOI18N
        botonCaptura.setToolTipText("Captura de pantalla de la webcam");
        botonCaptura.setFocusable(false);
        botonCaptura.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonCaptura.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonCaptura.addActionListener(formListener);
        jToolBar4.add(botonCaptura);

        jPanel2.add(jToolBar4, java.awt.BorderLayout.CENTER);

        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel5.setLayout(new java.awt.BorderLayout());

        nombreHerramienta.setText("Línea");
        jPanel5.add(nombreHerramienta, java.awt.BorderLayout.PAGE_END);

        jPanel2.add(jPanel5, java.awt.BorderLayout.SOUTH);

        jPanel1.add(jPanel2, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        menuArchivo.setText("Archivo");
        menuArchivo.setToolTipText("Abre una imagen, audio o vídeo.");

        menuItemNuevo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        menuItemNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/documento.png"))); // NOI18N
        menuItemNuevo.setText("Nuevo");
        menuItemNuevo.setToolTipText("Crea una nueva imagen");
        menuItemNuevo.addActionListener(formListener);
        menuArchivo.add(menuItemNuevo);

        menuItemAbrir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        menuItemAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/carpeta.png"))); // NOI18N
        menuItemAbrir.setText("Abrir");
        menuItemAbrir.setToolTipText("Abre una imagen, audio o vídeo.");
        menuItemAbrir.addActionListener(formListener);
        menuArchivo.add(menuItemAbrir);

        menuItemGuardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        menuItemGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/guardar.png"))); // NOI18N
        menuItemGuardar.setText("Guardar");
        menuItemGuardar.setToolTipText("Guarda la imagen de la ventana actual.");
        menuItemGuardar.addActionListener(formListener);
        menuArchivo.add(menuItemGuardar);

        barraMenu.add(menuArchivo);

        menuVer.setText("Ver");

        menuStatusBar.setSelected(true);
        menuStatusBar.setText("Ocultar barra de estado");
        menuStatusBar.addActionListener(formListener);
        menuVer.add(menuStatusBar);

        menuLista.setSelected(true);
        menuLista.setText("Ocultar lista de figuras");
        menuLista.addActionListener(formListener);
        menuVer.add(menuLista);

        menuGraficos.setSelected(true);
        menuGraficos.setText("Ocultar herramientas gráficas");
        menuGraficos.addActionListener(formListener);
        menuVer.add(menuGraficos);

        menuImagen.setSelected(true);
        menuImagen.setText("Ocultar herramientas de imagen");
        menuImagen.addActionListener(formListener);
        menuVer.add(menuImagen);

        menuAudio.setSelected(true);
        menuAudio.setText("Ocultar herramientas de audio y vídeo");
        menuAudio.addActionListener(formListener);
        menuVer.add(menuAudio);

        barraMenu.add(menuVer);

        menuAyuda.setText("Ayuda");

        menuAcerca.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        menuAcerca.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/icon.png"))); // NOI18N
        menuAcerca.setText("Acerca de...");
        menuAcerca.addActionListener(formListener);
        menuAyuda.add(menuAcerca);

        barraMenu.add(menuAyuda);

        setJMenuBar(barraMenu);

        pack();
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener, java.awt.event.FocusListener, javax.swing.event.ChangeListener, javax.swing.event.ListSelectionListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == botonLinea) {
                VentanaPrincipal.this.botonLineaActionPerformed(evt);
            }
            else if (evt.getSource() == botonRectangulo) {
                VentanaPrincipal.this.botonRectanguloActionPerformed(evt);
            }
            else if (evt.getSource() == botonOvalo) {
                VentanaPrincipal.this.botonOvaloActionPerformed(evt);
            }
            else if (evt.getSource() == botonSinRelleno) {
                VentanaPrincipal.this.botonSinRellenoActionPerformed(evt);
            }
            else if (evt.getSource() == botonRelleno) {
                VentanaPrincipal.this.botonRellenoActionPerformed(evt);
            }
            else if (evt.getSource() == botonGradiente) {
                VentanaPrincipal.this.botonGradienteActionPerformed(evt);
            }
            else if (evt.getSource() == botonDV) {
                VentanaPrincipal.this.botonDVActionPerformed(evt);
            }
            else if (evt.getSource() == botonDH) {
                VentanaPrincipal.this.botonDHActionPerformed(evt);
            }
            else if (evt.getSource() == botonDD) {
                VentanaPrincipal.this.botonDDActionPerformed(evt);
            }
            else if (evt.getSource() == botonContinua) {
                VentanaPrincipal.this.botonContinuaActionPerformed(evt);
            }
            else if (evt.getSource() == botonDiscontinua) {
                VentanaPrincipal.this.botonDiscontinuaActionPerformed(evt);
            }
            else if (evt.getSource() == botonPuntos) {
                VentanaPrincipal.this.botonPuntosActionPerformed(evt);
            }
            else if (evt.getSource() == botonAlisar) {
                VentanaPrincipal.this.botonAlisarActionPerformed(evt);
            }
            else if (evt.getSource() == colorNegro) {
                VentanaPrincipal.this.colorNegroActionPerformed(evt);
            }
            else if (evt.getSource() == colorRojo) {
                VentanaPrincipal.this.colorRojoActionPerformed(evt);
            }
            else if (evt.getSource() == colorAzul) {
                VentanaPrincipal.this.colorAzulActionPerformed(evt);
            }
            else if (evt.getSource() == colorBlanco) {
                VentanaPrincipal.this.colorBlancoActionPerformed(evt);
            }
            else if (evt.getSource() == colorAmarillo) {
                VentanaPrincipal.this.colorAmarilloActionPerformed(evt);
            }
            else if (evt.getSource() == colorVerde) {
                VentanaPrincipal.this.colorVerdeActionPerformed(evt);
            }
            else if (evt.getSource() == colorNegro1) {
                VentanaPrincipal.this.colorNegro1ActionPerformed(evt);
            }
            else if (evt.getSource() == colorRojo1) {
                VentanaPrincipal.this.colorRojo1ActionPerformed(evt);
            }
            else if (evt.getSource() == colorAzul1) {
                VentanaPrincipal.this.colorAzul1ActionPerformed(evt);
            }
            else if (evt.getSource() == colorBlanco1) {
                VentanaPrincipal.this.colorBlanco1ActionPerformed(evt);
            }
            else if (evt.getSource() == colorAmarillo1) {
                VentanaPrincipal.this.colorAmarillo1ActionPerformed(evt);
            }
            else if (evt.getSource() == colorVerde1) {
                VentanaPrincipal.this.colorVerde1ActionPerformed(evt);
            }
            else if (evt.getSource() == colorTrazoActual) {
                VentanaPrincipal.this.colorTrazoActualActionPerformed(evt);
            }
            else if (evt.getSource() == textTR) {
                VentanaPrincipal.this.textTRActionPerformed(evt);
            }
            else if (evt.getSource() == textTG) {
                VentanaPrincipal.this.textTGActionPerformed(evt);
            }
            else if (evt.getSource() == textTB) {
                VentanaPrincipal.this.textTBActionPerformed(evt);
            }
            else if (evt.getSource() == colorRellenoActual) {
                VentanaPrincipal.this.colorRellenoActualActionPerformed(evt);
            }
            else if (evt.getSource() == textRR) {
                VentanaPrincipal.this.textRRActionPerformed(evt);
            }
            else if (evt.getSource() == textRG) {
                VentanaPrincipal.this.textRGActionPerformed(evt);
            }
            else if (evt.getSource() == textRB) {
                VentanaPrincipal.this.textRBActionPerformed(evt);
            }
            else if (evt.getSource() == botonNormal) {
                VentanaPrincipal.this.botonNormalActionPerformed(evt);
            }
            else if (evt.getSource() == botonIluminar) {
                VentanaPrincipal.this.botonIluminarActionPerformed(evt);
            }
            else if (evt.getSource() == botonOscurecer) {
                VentanaPrincipal.this.botonOscurecerActionPerformed(evt);
            }
            else if (evt.getSource() == botonNegativo) {
                VentanaPrincipal.this.botonNegativoActionPerformed(evt);
            }
            else if (evt.getSource() == jComboBox1) {
                VentanaPrincipal.this.jComboBox1ActionPerformed(evt);
            }
            else if (evt.getSource() == botonSinusoidal) {
                VentanaPrincipal.this.botonSinusoidalActionPerformed(evt);
            }
            else if (evt.getSource() == botonBandas) {
                VentanaPrincipal.this.botonBandasActionPerformed(evt);
            }
            else if (evt.getSource() == jComboBox2) {
                VentanaPrincipal.this.jComboBox2ActionPerformed(evt);
            }
            else if (evt.getSource() == boton90) {
                VentanaPrincipal.this.boton90ActionPerformed(evt);
            }
            else if (evt.getSource() == boton180) {
                VentanaPrincipal.this.boton180ActionPerformed(evt);
            }
            else if (evt.getSource() == boton270) {
                VentanaPrincipal.this.boton270ActionPerformed(evt);
            }
            else if (evt.getSource() == botonAumentar) {
                VentanaPrincipal.this.botonAumentarActionPerformed(evt);
            }
            else if (evt.getSource() == botonReducir) {
                VentanaPrincipal.this.botonReducirActionPerformed(evt);
            }
            else if (evt.getSource() == botonDuplicado) {
                VentanaPrincipal.this.botonDuplicadoActionPerformed(evt);
            }
            else if (evt.getSource() == botonMover) {
                VentanaPrincipal.this.botonMoverActionPerformed(evt);
            }
            else if (evt.getSource() == botonPlay) {
                VentanaPrincipal.this.botonPlayActionPerformed(evt);
            }
            else if (evt.getSource() == botonStop) {
                VentanaPrincipal.this.botonStopActionPerformed(evt);
            }
            else if (evt.getSource() == botonRecord) {
                VentanaPrincipal.this.botonRecordActionPerformed(evt);
            }
            else if (evt.getSource() == botonCamara) {
                VentanaPrincipal.this.botonCamaraActionPerformed(evt);
            }
            else if (evt.getSource() == botonCaptura) {
                VentanaPrincipal.this.botonCapturaActionPerformed(evt);
            }
            else if (evt.getSource() == menuItemNuevo) {
                VentanaPrincipal.this.menuItemNuevoActionPerformed(evt);
            }
            else if (evt.getSource() == menuItemAbrir) {
                VentanaPrincipal.this.menuItemAbrirActionPerformed(evt);
            }
            else if (evt.getSource() == menuItemGuardar) {
                VentanaPrincipal.this.menuItemGuardarActionPerformed(evt);
            }
            else if (evt.getSource() == menuStatusBar) {
                VentanaPrincipal.this.menuStatusBarActionPerformed(evt);
            }
            else if (evt.getSource() == menuLista) {
                VentanaPrincipal.this.menuListaActionPerformed(evt);
            }
            else if (evt.getSource() == menuGraficos) {
                VentanaPrincipal.this.menuGraficosActionPerformed(evt);
            }
            else if (evt.getSource() == menuImagen) {
                VentanaPrincipal.this.menuImagenActionPerformed(evt);
            }
            else if (evt.getSource() == menuAudio) {
                VentanaPrincipal.this.menuAudioActionPerformed(evt);
            }
            else if (evt.getSource() == menuAcerca) {
                VentanaPrincipal.this.menuAcercaActionPerformed(evt);
            }
            else if (evt.getSource() == botonBorrar) {
                VentanaPrincipal.this.botonBorrarActionPerformed(evt);
            }
        }

        public void focusGained(java.awt.event.FocusEvent evt) {
            if (evt.getSource() == jSlider1) {
                VentanaPrincipal.this.jSlider1FocusGained(evt);
            }
            else if (evt.getSource() == jSlider2) {
                VentanaPrincipal.this.jSlider2FocusGained(evt);
            }
        }

        public void focusLost(java.awt.event.FocusEvent evt) {
            if (evt.getSource() == jSlider1) {
                VentanaPrincipal.this.jSlider1FocusLost(evt);
            }
            else if (evt.getSource() == jSlider2) {
                VentanaPrincipal.this.jSlider2FocusLost(evt);
            }
        }

        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            if (evt.getSource() == spinnerGrosor) {
                VentanaPrincipal.this.spinnerGrosorStateChanged(evt);
            }
            else if (evt.getSource() == sliderTransparencia) {
                VentanaPrincipal.this.sliderTransparenciaStateChanged(evt);
            }
            else if (evt.getSource() == jSlider1) {
                VentanaPrincipal.this.jSlider1StateChanged(evt);
            }
            else if (evt.getSource() == jSlider2) {
                VentanaPrincipal.this.jSlider2StateChanged(evt);
            }
        }

        public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
            if (evt.getSource() == jList1) {
                VentanaPrincipal.this.jList1ValueChanged(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents

    protected void vaciarLista(){
        ((DefaultListModel)jList1.getModel()).removeAllElements();
    }
    
    protected void cambiarLista(){
        ((DefaultListModel)jList1.getModel()).removeAllElements();
        JInternalFrame f = escritorio.getSelectedFrame();
        
        if(escritorio.getSelectedFrame()!=null){
            for(Trazo t: ((VentanaInterna)f).getLienzo2D().getFormas())
                ((DefaultListModel)jList1.getModel()).addElement(t);
        }
    }
    
    private void botonLineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonLineaActionPerformed
        JInternalFrame f = escritorio.getSelectedFrame();
        
        if(f!=null)
            if("VentanaInterna".equals(f.getClass().getSimpleName()))
                ((VentanaInterna)f).getLienzo2D().setModo(DrawMode.LINE);
        nombreHerramienta.setText("Línea");
    }//GEN-LAST:event_botonLineaActionPerformed

    private void botonRectanguloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRectanguloActionPerformed
        JInternalFrame f = escritorio.getSelectedFrame();
        
        if(f!=null)
            if("VentanaInterna".equals(f.getClass().getSimpleName()))
                ((VentanaInterna)f).getLienzo2D().setModo(DrawMode.RECT);
        nombreHerramienta.setText("Rectángulo");
    }//GEN-LAST:event_botonRectanguloActionPerformed

    private void botonOvaloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonOvaloActionPerformed
        JInternalFrame f = escritorio.getSelectedFrame();
        
        if(f!=null)
            if("VentanaInterna".equals(f.getClass().getSimpleName()))
                ((VentanaInterna)f).getLienzo2D().setModo(DrawMode.OVAL);
        nombreHerramienta.setText("Óvalo");
    }//GEN-LAST:event_botonOvaloActionPerformed

    private void colorNegroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorNegroActionPerformed
        JInternalFrame f = escritorio.getSelectedFrame();
        
        if(f!=null)
            if("VentanaInterna".equals(f.getClass().getSimpleName()))
                ((VentanaInterna)f).getLienzo2D().setColorT(Color.BLACK); 
        
        colorTrazoActual.setBackground(Color.BLACK);
        setColorT(0,0,0);
        
        Trazo t = jList1.getSelectedValue();
        
        if(t!=null){
            t.setColorT(Color.BLACK);
            repaint();
        }
    }//GEN-LAST:event_colorNegroActionPerformed

    private void colorRojoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorRojoActionPerformed
        JInternalFrame f = escritorio.getSelectedFrame();
        
        if(f!=null)
            if("VentanaInterna".equals(f.getClass().getSimpleName()))
                ((VentanaInterna)f).getLienzo2D().setColorT(Color.RED);  
        
        colorTrazoActual.setBackground(Color.RED);
        setColorT(255,0,0);
        
        Trazo t = jList1.getSelectedValue();
        
        if(t!=null){
            t.setColorT(Color.RED);
            repaint();
        }
    }//GEN-LAST:event_colorRojoActionPerformed

    private void colorAzulActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorAzulActionPerformed
        JInternalFrame f = escritorio.getSelectedFrame();
        
        if(f!=null)
            if("VentanaInterna".equals(f.getClass().getSimpleName()))
                ((VentanaInterna)f).getLienzo2D().setColorT(Color.BLUE); 
        
        colorTrazoActual.setBackground(Color.BLUE);
        setColorT(0,0,255);
                
        Trazo t = jList1.getSelectedValue();
        
        if(t!=null){
            t.setColorT(Color.BLUE);
            repaint();
        }     
    }//GEN-LAST:event_colorAzulActionPerformed

    private void colorBlancoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorBlancoActionPerformed
        JInternalFrame f = escritorio.getSelectedFrame();
        
        if(f!=null)
            if("VentanaInterna".equals(f.getClass().getSimpleName()))
                ((VentanaInterna)f).getLienzo2D().setColorT(Color.WHITE); 
        
        colorTrazoActual.setBackground(Color.WHITE);
        setColorT(255,255,255);
        
        Trazo t = jList1.getSelectedValue();
        
        if(t!=null){
            t.setColorT(Color.WHITE);
            repaint();
        }
    }//GEN-LAST:event_colorBlancoActionPerformed

    private void colorAmarilloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorAmarilloActionPerformed
        JInternalFrame f = escritorio.getSelectedFrame();
        
        if(f!=null)
            if("VentanaInterna".equals(f.getClass().getSimpleName()))
                ((VentanaInterna)f).getLienzo2D().setColorT(Color.YELLOW); 
        
        colorTrazoActual.setBackground(Color.YELLOW);
        setColorT(255,255,0);
        
        Trazo t = jList1.getSelectedValue();
        
        if(t!=null){
            t.setColorT(Color.YELLOW);
            repaint();
        }
    }//GEN-LAST:event_colorAmarilloActionPerformed

    private void colorVerdeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorVerdeActionPerformed
        JInternalFrame f = escritorio.getSelectedFrame();
        
        if(f!=null)
            if("VentanaInterna".equals(f.getClass().getSimpleName()))
                ((VentanaInterna)f).getLienzo2D().setColorT(Color.GREEN); 
        
        colorTrazoActual.setBackground(Color.GREEN);
        setColorT(0,255,0);
        
        Trazo t = jList1.getSelectedValue();
        
        if(t!=null){
            t.setColorT(Color.GREEN);
            repaint();
        }
    }//GEN-LAST:event_colorVerdeActionPerformed
                                           
    private void menuStatusBarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuStatusBarActionPerformed
        jPanel5.setVisible(menuStatusBar.isSelected());
        
        if(jPanel5.isVisible()) menuStatusBar.setText("Ocultar barra de estado");
        else menuStatusBar.setText("Mostrar barra de estado");
    }//GEN-LAST:event_menuStatusBarActionPerformed

    private void menuItemAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemAbrirActionPerformed
        JFileChooser dlg = new JFileChooser();
  
        FileFilter jpg = new FileNameExtensionFilter("*.jpg", "jpg");
        FileFilter png = new FileNameExtensionFilter("*.png", "png");
        FileFilter wav = new FileNameExtensionFilter("*.wav", "wav");
        FileFilter au = new FileNameExtensionFilter("*.au", "au");
        FileFilter avi = new FileNameExtensionFilter("*.avi", "avi");
        FileFilter mpg = new FileNameExtensionFilter("*.mpg", "mpg");
        FileFilter mp4 = new FileNameExtensionFilter("*.mp4", "mp4");
        dlg.addChoosableFileFilter(jpg);
        dlg.addChoosableFileFilter(png);
        dlg.addChoosableFileFilter(wav);
        dlg.addChoosableFileFilter(au);
        dlg.addChoosableFileFilter(avi);
        dlg.addChoosableFileFilter(mpg);
        dlg.addChoosableFileFilter(mp4);
        
        int resp = dlg.showOpenDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
            try{
            File f = dlg.getSelectedFile();
            if(f.getAbsolutePath().endsWith(".jpg") || f.getAbsolutePath().endsWith(".png")){
                BufferedImage img = ImageIO.read(f);
                VentanaInterna vi = new VentanaInterna();
                vi.getLienzo2D().addLienzoListener(manejador);
                actualizar(vi);
                vi.getLienzo2D().setImage(img);
                this.escritorio.add(vi);
                vi.setTitle(f.getName());
                vi.setVisible(true);
            }
            else if(f.getAbsolutePath().endsWith(".wav") || f.getAbsolutePath().endsWith(".au")){              
                f = new File(dlg.getSelectedFile().getAbsolutePath()){
                @Override
                public String toString(){
                    return this.getName();
                }
                };
                listaReproduccion.addItem(f);
                listaReproduccion.setSelectedItem(f);              
            }
            else if(f.getAbsolutePath().endsWith(".avi") || f.getAbsolutePath().endsWith(".mpg") || f.getAbsolutePath().endsWith(".mp4")){
                VentanaInternaVlcPlayer vi = VentanaInternaVlcPlayer.getInstance(f);
                this.escritorio.add(vi);
                vi.setVisible(true);
                vi.setTitle(f.getName());
            }
            
            } catch (Exception ex){
                System.err.println("Error al leer el archivo");
            }
        }
    }//GEN-LAST:event_menuItemAbrirActionPerformed

    private void menuItemNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemNuevoActionPerformed
      JTextField fx = new JTextField(5);
      JTextField fy = new JTextField(5);

      JPanel myPanel = new JPanel();
      myPanel.add(new JLabel("Ancho:"));
      myPanel.add(fx);
      myPanel.add(new JLabel("Alto:"));
      myPanel.add(fy);
      
      fx.setText("300");
      fy.setText("300");

      int result = JOptionPane.showConfirmDialog(null, myPanel, 
               "Dimensiones lienzo (mínimo 300x300)", JOptionPane.PLAIN_MESSAGE);
      if (result == JOptionPane.OK_OPTION) {
        BufferedImage img;
        
        int x=300, y=300;
        if(!fx.getText().equals(""))
            x = Integer.parseInt(fx.getText());
        if(!fy.getText().equals(""))       
            y = Integer.parseInt(fy.getText());
        
        if(x<300) x=300;
        if(y<300) y=300;
        
        img = new BufferedImage(x,y,BufferedImage.TYPE_INT_RGB);
        img.createGraphics().fillRect(0, 0, img.getWidth(), img.getHeight());
        
        Dimension d = new Dimension();
        d.setSize(x, y);
        
        VentanaInterna vi = new VentanaInterna();
        vi.getLienzo2D().addLienzoListener(manejador);
        actualizar(vi);
        vi.getLienzo2D().setImage(img);
        vi.setLimit(d);
        escritorio.add(vi);
        vi.setTitle("Nuevo lienzo");
        vi.setVisible(true);
      }    
    }//GEN-LAST:event_menuItemNuevoActionPerformed

    private void actualizar(VentanaInterna vi){
        LienzoImagen2D l = vi.getLienzo2D();
        
        //MODO DE DIBUJO
        if(botonLinea.isSelected()){
            l.setModo(DrawMode.LINE);
        }
        else if(botonRectangulo.isSelected()){
            l.setModo(DrawMode.RECT);
        }
        else if(botonOvalo.isSelected()){
            l.setModo(DrawMode.OVAL);
        }
        else {
            l.setModo(DrawMode.LINE);
            botonLinea.setSelected(true);
        }
        //COLOR TRAZO
        if(colorNegro.isSelected())
            l.setColorT(Color.BLACK);
        else if(colorRojo.isSelected())
            l.setColorT(Color.RED);
        else if(colorAzul.isSelected())
            l.setColorT(Color.BLUE);
        else if(colorBlanco.isSelected())
            l.setColorT(Color.WHITE);
        else if(colorAmarillo.isSelected())
            l.setColorT(Color.YELLOW);
        else if(colorVerde.isSelected())
            l.setColorT(Color.GREEN);
        else if(colorTrazoActual.isSelected()){
            Color color = new Color(Integer.parseInt(textTR.getText()),
                                Integer.parseInt(textTG.getText()),
                                Integer.parseInt(textTB.getText())
                               );
            l.setColorT(color);
        }
            
       
        //TRASNPARENCIA
        l.setTransparencia(sliderTransparencia.getValue()/100.0f);
        
        //GROSOR TRAZO
        l.setGrosor((int)spinnerGrosor.getValue());

        //ALISADO
        l.setAlisado(botonAlisar.isSelected());

        //TIPO TRAZO
        if(botonContinua.isSelected())
            l.setTipoT(TipoTrazo.BASIC);
        else if(botonDiscontinua.isSelected())
            l.setTipoT(TipoTrazo.LINE);
        else if(botonPuntos.isSelected())
            l.setTipoT(TipoTrazo.POINT);
        
        //COLOR RELLENO
        if(colorNegro1.isSelected())
            l.setColorR(Color.BLACK);
        else if(colorRojo1.isSelected())
            l.setColorR(Color.RED);
        else if(colorAzul1.isSelected())
            l.setColorR(Color.BLUE);
        else if(colorBlanco1.isSelected())
            l.setColorR(Color.WHITE);
        else if(colorAmarillo1.isSelected())
            l.setColorR(Color.YELLOW);
        else if(colorVerde1.isSelected())
            l.setColorR(Color.GREEN);
        else if(colorRellenoActual.isSelected()){
            Color color = new Color(Integer.parseInt(textRR.getText()),
                                Integer.parseInt(textRG.getText()),
                                Integer.parseInt(textRB.getText())
                               );
            l.setColorR(color);
        }
        
        //TIPO DE RELLENO
        if(botonRelleno.isSelected())
            l.setTipoR(TipoRelleno.PLAIN);
        else if(botonSinRelleno.isSelected())
            l.setTipoR(TipoRelleno.EMPTY);
        else if(botonGradiente.isSelected())
            l.setTipoR(TipoRelleno.D_VERTICAL);
    }
    
    private void menuItemGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemGuardarActionPerformed
        
        JInternalFrame frame = escritorio.getSelectedFrame();
        
        if (frame != null && !("VentanaInternaVlcPlayer".equals(frame.getClass().getSimpleName()))) {
            VentanaInterna vi=(VentanaInterna)frame;
            JFileChooser dlg = new JFileChooser();
            int resp = dlg.showSaveDialog(this);
            if (resp == JFileChooser.APPROVE_OPTION) {
                try {
                    BufferedImage img = vi.getLienzo2D().getImage(true);
                    if (img != null) {
                        File f = dlg.getSelectedFile();
                        ImageIO.write(img, "jpg", f);
                        vi.setTitle(f.getName());
                    }
                }catch (Exception ex) {
                    System.err.println("Error al guardar la imagen");
                }
            }
        }
    }//GEN-LAST:event_menuItemGuardarActionPerformed

    private void spinnerGrosorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerGrosorStateChanged
        JInternalFrame f = escritorio.getSelectedFrame();
        
        int value = (int) spinnerGrosor.getValue();
        if(value > 10) spinnerGrosor.setValue(10);
        else if(value < 1) spinnerGrosor.setValue(1);
        
        if(f!=null)
            if("VentanaInterna".equals(f.getClass().getSimpleName()))
                ((VentanaInterna)f).getLienzo2D().setGrosor((int) spinnerGrosor.getValue());      
        
        Trazo t = jList1.getSelectedValue();
        
        if(t!=null){
            t.setGrosor((int) spinnerGrosor.getValue());
            repaint();
        }
    }//GEN-LAST:event_spinnerGrosorStateChanged

    private void menuGraficosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuGraficosActionPerformed
        jToolBar1.setVisible(menuGraficos.isSelected());
        
        if(jToolBar1.isVisible()) menuGraficos.setText("Ocultar herramientas gráficas");
        else menuGraficos.setText("Mostrar herramientas gráficas");
    }//GEN-LAST:event_menuGraficosActionPerformed

    private void menuImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuImagenActionPerformed
        jToolBar2.setVisible(menuImagen.isSelected());
        
        if(jToolBar2.isVisible()) menuImagen.setText("Ocultar herramientas de imagen");
        else menuImagen.setText("Mostrar herramientas de imagen");
    }//GEN-LAST:event_menuImagenActionPerformed

    private void jSlider1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jSlider1FocusGained
        JInternalFrame f = escritorio.getSelectedFrame();
        
        if(escritorio.getSelectedFrame()!=null)
            if("VentanaInterna".equals(f.getClass().getSimpleName())){
                VentanaInterna vi = (VentanaInterna)(escritorio.getSelectedFrame());
                if(vi!=null){
                    ColorModel cm = vi.getLienzo2D().getImage().getColorModel();
                    WritableRaster raster = vi.getLienzo2D().getImage().copyData(null);
                    boolean alfaPre = vi.getLienzo2D().getImage().isAlphaPremultiplied();
                    imgSource = new BufferedImage(cm,raster,alfaPre,null);
                }
            }
    }//GEN-LAST:event_jSlider1FocusGained

    private void jSlider1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jSlider1FocusLost
        imgSource = null;
        jSlider1.setValue(0);
    }//GEN-LAST:event_jSlider1FocusLost

    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        JInternalFrame f = escritorio.getSelectedFrame();
        
        if(escritorio.getSelectedFrame()!=null)
            if("VentanaInterna".equals(f.getClass().getSimpleName())){
                VentanaInterna vi = (VentanaInterna) (escritorio.getSelectedFrame());

                if(imgSource!=null){
                    try{
                        RescaleOp rop = new RescaleOp(1.0F, jSlider1.getValue(), null);
                        rop.filter(imgSource, vi.getLienzo2D().getImage());
                        vi.getLienzo2D().repaint();
                    } catch(IllegalArgumentException e){
                        System.err.println(e.getLocalizedMessage());
                    }
                }
            }
        
    }//GEN-LAST:event_jSlider1StateChanged

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        JInternalFrame f = escritorio.getSelectedFrame();
        
        if(escritorio.getSelectedFrame()!=null)
            if("VentanaInterna".equals(f.getClass().getSimpleName())){
                VentanaInterna vi = (VentanaInterna) f;
                BufferedImage imgSource = vi.getLienzo2D().getImage();
                if(imgSource!=null){
                    try{
                        int value = jComboBox1.getSelectedIndex();

                            Kernel k = KernelProducer.createKernel(value);

                            if(value==5){
                                float filtro[] = new float[25];
                                Arrays.fill(filtro, 0.04f);
                                k = new Kernel(5,5,filtro);
                            }    
                            if(value==6){
                                float filtro[] = new float[49];
                                Arrays.fill(filtro, 1.0f/49.0f);
                                k = new Kernel(7,7,filtro);
                            }
                        ConvolveOp cop = new ConvolveOp(k,ConvolveOp.EDGE_NO_OP,null);
                            BufferedImage imgdest = cop.filter(imgSource, null);
                            vi.getLienzo2D().setImage(imgdest);
                        vi.getLienzo2D().repaint();
                    } catch(IllegalArgumentException e){
                        System.err.println(e.getLocalizedMessage());
                    }
                }
            }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void botonRellenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRellenoActionPerformed
        JInternalFrame f = escritorio.getSelectedFrame();
        
        if(f!=null)
            if("VentanaInterna".equals(f.getClass().getSimpleName()))
                ((VentanaInterna)f).getLienzo2D().setTipoR(TipoRelleno.PLAIN);
        
        Trazo t = jList1.getSelectedValue();
        
        if(t!=null){
            t.setTipoR(TipoRelleno.PLAIN);
            repaint();
        }
    }//GEN-LAST:event_botonRellenoActionPerformed

    private void botonAlisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAlisarActionPerformed
        JInternalFrame f = escritorio.getSelectedFrame();
        
        if(f!=null)
            if("VentanaInterna".equals(f.getClass().getSimpleName()))
                ((VentanaInterna)f).getLienzo2D().setAlisado(botonAlisar.isSelected());
        
        Trazo t = jList1.getSelectedValue();
        
        if(t!=null){
            t.setAlisado(botonAlisar.isSelected());
            repaint();
        }
    }//GEN-LAST:event_botonAlisarActionPerformed

    private void botonNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonNormalActionPerformed
        JInternalFrame f = escritorio.getSelectedFrame();
        
        if(escritorio.getSelectedFrame()!=null)
            if("VentanaInterna".equals(f.getClass().getSimpleName())){
                VentanaInterna vi = (VentanaInterna) f;
                
                BufferedImage imgSource = vi.getLienzo2D().getImage();
                if(imgSource!=null){
                    try{
                        int type = LookupTableProducer.TYPE_SFUNCION;
                        LookupTable lt = LookupTableProducer.createLookupTable(type);
                        LookupOp lop = new LookupOp(lt, null);
                        // Imagen origen y destino iguales
                        lop.filter( imgSource , imgSource);
                        vi.repaint();
                    } catch(Exception e){
                        System.err.println(e.getLocalizedMessage());
                    }
                }
                
                escritorio.repaint();
            }
    }//GEN-LAST:event_botonNormalActionPerformed

    private void botonIluminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonIluminarActionPerformed
        JInternalFrame f = escritorio.getSelectedFrame();
        
        if(escritorio.getSelectedFrame()!=null)
            if("VentanaInterna".equals(f.getClass().getSimpleName())){
                VentanaInterna vi = (VentanaInterna) f;
            
                BufferedImage imgSource = vi.getLienzo2D().getImage();
                if(imgSource!=null){
                    try{
                        int type = LookupTableProducer.TYPE_LOGARITHM;
                        LookupTable lt = LookupTableProducer.createLookupTable(type);
                        LookupOp lop = new LookupOp(lt, null);
                        // Imagen origen y destino iguales
                        lop.filter( imgSource , imgSource);
                        vi.repaint();
                    } catch(Exception e){
                        System.err.println(e.getLocalizedMessage());
                    }
                }
                
                escritorio.repaint();
            }
    }//GEN-LAST:event_botonIluminarActionPerformed

    private void botonOscurecerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonOscurecerActionPerformed
        JInternalFrame f = escritorio.getSelectedFrame();
        
        if(escritorio.getSelectedFrame()!=null)
            if("VentanaInterna".equals(f.getClass().getSimpleName())){
                VentanaInterna vi = (VentanaInterna) f;
            
        
                BufferedImage imgSource = vi.getLienzo2D().getImage();
                if(imgSource!=null){
                    try{
                        int type = LookupTableProducer.TYPE_POWER;
                        LookupTable lt = LookupTableProducer.createLookupTable(type);
                        LookupOp lop = new LookupOp(lt, null);
                        // Imagen origen y destino iguales
                        lop.filter( imgSource , imgSource);
                        vi.repaint();
                    } catch(Exception e){
                        System.err.println(e.getLocalizedMessage());
                    }
                }
                
                escritorio.repaint();
            }      
    }//GEN-LAST:event_botonOscurecerActionPerformed

    private void botonSinusoidalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSinusoidalActionPerformed
        JInternalFrame f = escritorio.getSelectedFrame();
        
        if(escritorio.getSelectedFrame()!=null)
            if("VentanaInterna".equals(f.getClass().getSimpleName())){
                VentanaInterna vi = (VentanaInterna) f;
            
                BufferedImage imgSource = vi.getLienzo2D().getImage();
                if(imgSource!=null){
                    try{
                        LookupTable lt = null;
                        
                        if(botonSeno.isSelected())
                            lt = seno(180.0/255.0);
                        else if(botonCoseno.isSelected())
                            lt = cos(180.0/255.0);
                        else if(botonCosSin.isSelected())
                            lt = look(180.0/255.0);
                        
                        LookupOp lop = new LookupOp(lt, null);
                        // Imagen origen y destino iguales
                        lop.filter( imgSource , imgSource);
                        vi.repaint();
                    } catch(Exception e){
                        System.err.println(e.getLocalizedMessage());
                    }
                }            
                escritorio.repaint();
            }
    }//GEN-LAST:event_botonSinusoidalActionPerformed

    private void boton180ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton180ActionPerformed
        JInternalFrame f = escritorio.getSelectedFrame();
        
        if(escritorio.getSelectedFrame()!=null)
            if("VentanaInterna".equals(f.getClass().getSimpleName())){
                VentanaInterna vi = (VentanaInterna) f;
                   
                BufferedImage imgSource = vi.getLienzo2D().getImage();
                if(imgSource!=null){
                    AffineTransform at;
                    //at = AffineTransform.getScaleInstance(1.25,1.25);
                    at = AffineTransform.getRotateInstance(Math.toRadians(180.0),imgSource.getWidth()/2,imgSource.getHeight()/2);
                    //at = AffineTransform.getShearInstance(0.5,0.0);
                    //at = AffineTransform.getTranslateInstance(20.0,20.0);
                    try{
                        AffineTransformOp atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
                        BufferedImage imgdest = atop.filter( imgSource, null);
                        vi.getLienzo2D().setImage(imgdest);
                        vi.getLienzo2D().repaint();
                    }catch(Exception e){
                        System.err.println("Error");
                    }
                }

                escritorio.repaint();
            }
    }//GEN-LAST:event_boton180ActionPerformed

    private void boton90ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton90ActionPerformed
        JInternalFrame f = escritorio.getSelectedFrame();
        
        if(escritorio.getSelectedFrame()!=null)
            if("VentanaInterna".equals(f.getClass().getSimpleName())){
                VentanaInterna vi = (VentanaInterna) f;

                BufferedImage imgSource = vi.getLienzo2D().getImage();
                if(imgSource!=null){
                    AffineTransform at;
                    //at = AffineTransform.getScaleInstance(1.25,1.25);
                    at = AffineTransform.getRotateInstance(Math.toRadians(90.0),imgSource.getWidth()/2,imgSource.getHeight()/2);
                    //at = AffineTransform.getShearInstance(0.5,0.0);
                    //at = AffineTransform.getTranslateInstance(20.0,20.0);
                    try{
                        AffineTransformOp atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
                        BufferedImage imgdest = atop.filter( imgSource, null);
                        vi.getLienzo2D().setImage(imgdest);
                        vi.getLienzo2D().repaint();
                    }catch(Exception e){
                        System.err.println("Error");
                    }
                }

                escritorio.repaint();
            }
    }//GEN-LAST:event_boton90ActionPerformed

    private void boton270ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton270ActionPerformed
        JInternalFrame f = escritorio.getSelectedFrame();
        
        if(escritorio.getSelectedFrame()!=null)
            if("VentanaInterna".equals(f.getClass().getSimpleName())){
                VentanaInterna vi = (VentanaInterna) f;
                  
                BufferedImage imgSource = vi.getLienzo2D().getImage();
                if(imgSource!=null){
                    AffineTransform at;
                    //at = AffineTransform.getScaleInstance(1.25,1.25);
                    at = AffineTransform.getRotateInstance(Math.toRadians(270.0),imgSource.getWidth()/2,imgSource.getHeight()/2);
                    //at = AffineTransform.getShearInstance(0.5,0.0);
                    //at = AffineTransform.getTranslateInstance(20.0,20.0);
                    try{
                        AffineTransformOp atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
                        BufferedImage imgdest = atop.filter( imgSource, null);
                        vi.getLienzo2D().setImage(imgdest);
                        vi.getLienzo2D().repaint();
                    }catch(Exception e){
                        System.err.println("Error");
                    }
                }

                escritorio.repaint();
            }
    }//GEN-LAST:event_boton270ActionPerformed

    private void botonAumentarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAumentarActionPerformed
        JInternalFrame f = escritorio.getSelectedFrame();
        
        if(escritorio.getSelectedFrame()!=null)
            if("VentanaInterna".equals(f.getClass().getSimpleName())){
                VentanaInterna vi = (VentanaInterna)f;
            
                BufferedImage imgSource = vi.getLienzo2D().getImage();
                if(imgSource!=null){
                    AffineTransform at;
                    at = AffineTransform.getScaleInstance(1.25,1.25);
                    //at = AffineTransform.getRotateInstance(Math.toRadians(270.0),imgSource.getWidth()/2,imgSource.getHeight()/2);
                    //at = AffineTransform.getShearInstance(0.5,0.0);
                    //at = AffineTransform.getTranslateInstance(20.0,20.0);
                    try{
                        AffineTransformOp atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
                        BufferedImage imgdest = atop.filter( imgSource, null);
                        vi.getLienzo2D().setImage(imgdest);
                        vi.getLienzo2D().repaint();
                    }catch(Exception e){
                        System.err.println("Error");
                    }
                }

                escritorio.repaint();
            }
    }//GEN-LAST:event_botonAumentarActionPerformed

    private void botonReducirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonReducirActionPerformed
        JInternalFrame f = escritorio.getSelectedFrame();
        
        if(escritorio.getSelectedFrame()!=null)
            if("VentanaInterna".equals(f.getClass().getSimpleName())){
                VentanaInterna vi = (VentanaInterna)f;
            
                BufferedImage imgSource = vi.getLienzo2D().getImage();
                if(imgSource!=null){
                    AffineTransform at;
                    at = AffineTransform.getScaleInstance(0.75,0.75);
                    //at = AffineTransform.getRotateInstance(Math.toRadians(270.0),imgSource.getWidth()/2,imgSource.getHeight()/2);
                    //at = AffineTransform.getShearInstance(0.5,0.0);
                    //at = AffineTransform.getTranslateInstance(20.0,20.0);
                    try{
                        AffineTransformOp atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
                        BufferedImage imgdest = atop.filter( imgSource, null);
                        vi.getLienzo2D().setImage(imgdest);
                        vi.getLienzo2D().repaint();
                    }catch(Exception e){
                        System.err.println("Error");
                    }
                }

                escritorio.repaint();
            }
    }//GEN-LAST:event_botonReducirActionPerformed

    private void jSlider2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider2StateChanged
        JInternalFrame f = escritorio.getSelectedFrame();
        
        if(escritorio.getSelectedFrame()!=null)
            if("VentanaInterna".equals(f.getClass().getSimpleName())){        
                VentanaInterna vi = (VentanaInterna)f;

                BufferedImage imgSource = imgAux;
                if(imgSource!=null){
                    AffineTransform at;
                    //at = AffineTransform.getScaleInstance(1.25,1.25);
                    at = AffineTransform.getRotateInstance(Math.toRadians(jSlider2.getValue()),imgAux.getWidth()/2,imgAux.getHeight()/2);
                    //at = AffineTransform.getShearInstance(0.5,0.0);
                    //at = AffineTransform.getTranslateInstance(20.0,20.0);
                    try{
                        AffineTransformOp atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
                        BufferedImage imgdest = atop.filter( imgSource, null);
                        vi.getLienzo2D().setImage(imgdest);
                        vi.getLienzo2D().repaint();
                    }catch(Exception e){
                        System.err.println("Error");
                    }
                }

                escritorio.repaint();
            }
    }//GEN-LAST:event_jSlider2StateChanged

    private void jSlider2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jSlider2FocusGained
        JInternalFrame f = escritorio.getSelectedFrame();
        
        if(escritorio.getSelectedFrame()!=null)
            if("VentanaInterna".equals(f.getClass().getSimpleName())){        
                VentanaInterna vi = (VentanaInterna)f;
                ColorModel cm = vi.getLienzo2D().getImage().getColorModel();
                WritableRaster raster = vi.getLienzo2D().getImage().copyData(null);
                boolean alfaPre = vi.getLienzo2D().getImage().isAlphaPremultiplied();
                imgAux = new BufferedImage(cm,raster,alfaPre,null);
            }
    }//GEN-LAST:event_jSlider2FocusGained

    private void jSlider2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jSlider2FocusLost
        imgSource = null;
        jSlider1.setValue(0);
    }//GEN-LAST:event_jSlider2FocusLost

    private void botonBandasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBandasActionPerformed
        JInternalFrame f = escritorio.getSelectedFrame();
        
        if(escritorio.getSelectedFrame()!=null)
            if("VentanaInterna".equals(f.getClass().getSimpleName())){        
                VentanaInterna vi = (VentanaInterna)(escritorio.getSelectedFrame());
 
                imgSource = ((vi.getLienzo2D())).getImage();

                if(imgSource != null){
                    ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);
                    ComponentColorModel cm = new ComponentColorModel(cs, false, false, Transparency.OPAQUE, DataBuffer.TYPE_BYTE);

                    for(int i=0; i<3; i++){
                        VentanaInterna ventana = new VentanaInterna();
                        vi.getLienzo2D().addLienzoListener(manejador);
                        int band[] = {i};
                        WritableRaster band_raster = (WritableRaster)imgSource.getRaster().createWritableChild(0, 0, imgSource.getWidth(), imgSource.getHeight(), 0, 0, band);

                        BufferedImage img_banda = new BufferedImage(cm, band_raster, false, null);
                        ventana.getLienzo2D().setImage(img_banda);

                        escritorio.add(ventana);
                        ventana.setVisible(true);
                        ventana.setTitle("Banda " + i);
                    }
                }
                escritorio.repaint();
            }
    }//GEN-LAST:event_botonBandasActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        JInternalFrame f = escritorio.getSelectedFrame();
        
        if(escritorio.getSelectedFrame()!=null)
            if("VentanaInterna".equals(f.getClass().getSimpleName())){
                VentanaInterna vi = (VentanaInterna)(escritorio.getSelectedFrame());

                imgSource = vi.getLienzo2D().getImage();

                if(imgSource != null){

                    switch(String.valueOf(jComboBox2.getSelectedItem())){
                        case "RGB":
                            if(imgSource.getColorModel().getColorSpace().getType() == ColorSpace.TYPE_YCbCr){
                                ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_sRGB);
                                ColorConvertOp cop = new ColorConvertOp(cs, null);

                                BufferedImage dest = cop.filter(imgSource, null);

                                VentanaInterna ventana = new VentanaInterna();
                                ventana.getLienzo2D().setImage(dest);
                                escritorio.add(ventana);
                                ventana.setVisible(true);
                                ventana.setTitle("-RGB-");
                            }
                            break;
                        case "YCC":
                            if(imgSource.getColorModel().getColorSpace().getType() == ColorSpace.TYPE_RGB){
                                ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_PYCC);
                                ColorConvertOp cop = new ColorConvertOp(cs, null);

                                BufferedImage dest = cop.filter(imgSource, null);

                                VentanaInterna ventana = new VentanaInterna();
                                ventana.getLienzo2D().setImage(dest);
                                escritorio.add(ventana);
                                ventana.setVisible(true);
                                ventana.setTitle("-YCC-");
                            }
                            break;
                        case "GREY":
                            if(imgSource.getColorModel().getColorSpace().getType() == ColorSpace.TYPE_RGB || imgSource.getColorModel().getColorSpace().getType() == ColorSpace.TYPE_YCbCr){
                                ColorSpace cs = new sm.image.color.GreyColorSpace();
                                ColorConvertOp cop = new ColorConvertOp(cs, null);

                                BufferedImage dest = cop.filter(imgSource, null);

                                VentanaInterna ventana = new VentanaInterna();
                                ventana.getLienzo2D().setImage(dest);
                                escritorio.add(ventana);
                                ventana.setVisible(true);
                                ventana.setTitle("-GREY-");
                            }
                            break;
                    }
                }

                escritorio.repaint();
            }
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void botonPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonPlayActionPerformed
        JInternalFrame frame = escritorio.getSelectedFrame();
        if(frame != null){
            if("VentanaInternaVlcPlayer".equals(frame.getClass().getSimpleName()))
                ((VentanaInternaVlcPlayer)frame).play();        
            else{
                File f = (File)listaReproduccion.getSelectedItem();
                if(f!=null){
                    player = new SMClipPlayer(f);
                    if (player != null)
                        player.play();           
                }
            }   
        }
        else{
            File f = (File)listaReproduccion.getSelectedItem();
            if(f!=null){
                player = new SMClipPlayer(f);
                if (player != null)
                    player.play();           
            }
        }   
    }//GEN-LAST:event_botonPlayActionPerformed

    private void botonStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonStopActionPerformed
        File f = (File)listaReproduccion.getSelectedItem();
        if(f!=null){
            if (player != null) {
                player.stop();
            }
        }
        
        JInternalFrame frame = escritorio.getSelectedFrame();
        if(frame != null){
            if("VentanaInternaVlcPlayer".equals(frame.getClass().getSimpleName()))
                ((VentanaInternaVlcPlayer)frame).stop();        
        }
        
        if(recorder != null){ 
            Icon icon = new ImageIcon(getClass().getResource("/iconos/microphone.png"));
            botonRecord.setIcon(icon);
            recorder.stop();
            recorder = null;
            JFileChooser dlg = new JFileChooser();
            int resp = dlg.showSaveDialog(this);
            if (resp == JFileChooser.APPROVE_OPTION) {
                try {
                    File file = new File(dlg.getSelectedFile().getAbsolutePath()){
                    @Override
                    public String toString(){
                        return this.getName();
                    }
                    };
                    auxAudio.renameTo(file);
                    listaReproduccion.addItem(file);
                    listaReproduccion.setSelectedItem(file);
                }catch (Exception ex) {
                    System.err.println("Error al grabar");
                }
            }
        }
    }//GEN-LAST:event_botonStopActionPerformed

    private void botonRecordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRecordActionPerformed
            Icon icon = new ImageIcon(getClass().getResource("/iconos/recording.png"));
            botonRecord.setIcon(icon);
            auxAudio = new File("Auxiliar.wav");
            recorder = new SMSoundRecorder(auxAudio);
            recorder.record();
    }//GEN-LAST:event_botonRecordActionPerformed

    private void botonCamaraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCamaraActionPerformed
        if(cam==null || !cam.isVisible()){
            cam = VentanaInternaCamara.getInstance();
            escritorio.add(cam);
            cam.setVisible(true);
        }
    }//GEN-LAST:event_botonCamaraActionPerformed

    private void botonCapturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCapturaActionPerformed
        if(cam != null){
            BufferedImage img = cam.getImage();
            VentanaInterna vi = new VentanaInterna();
            actualizar(vi);
            vi.getLienzo2D().setImage(img);
            vi.getLienzo2D().addLienzoListener(manejador);
            this.escritorio.add(vi);
            vi.setTitle("Captura webcam");
            vi.setVisible(true);
        }
    }//GEN-LAST:event_botonCapturaActionPerformed
   
    private void setColorR(int r, int g, int b){
        textRR.setText(Integer.toString(r));
        textRG.setText(Integer.toString(g));
        textRB.setText(Integer.toString(b));
    }
    
    private void setColorT(int r, int g, int b){
        textTR.setText(Integer.toString(r));
        textTG.setText(Integer.toString(g));
        textTB.setText(Integer.toString(b));
    }
    
    private void colorNegro1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorNegro1ActionPerformed
        JInternalFrame f = escritorio.getSelectedFrame();
        
        if(f!=null)
            if("VentanaInterna".equals(f.getClass().getSimpleName()))
                ((VentanaInterna)f).getLienzo2D().setColorR(Color.BLACK);
        
        colorRellenoActual.setBackground(Color.BLACK);
        setColorR(0,0,0);
        
        Trazo t = jList1.getSelectedValue();
        
        if(t!=null){
            t.setColorR(Color.BLACK);
            repaint();
        }
    }//GEN-LAST:event_colorNegro1ActionPerformed

    private void colorRojo1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorRojo1ActionPerformed
        JInternalFrame f = escritorio.getSelectedFrame();
        
        if(f!=null)
            if("VentanaInterna".equals(f.getClass().getSimpleName()))
                ((VentanaInterna)f).getLienzo2D().setColorR(Color.RED);
        
        colorRellenoActual.setBackground(Color.RED);
        setColorR(255,0,0);
        
        Trazo t = jList1.getSelectedValue();
        
        if(t!=null){
            t.setColorR(Color.RED);
            repaint();
        }
    }//GEN-LAST:event_colorRojo1ActionPerformed

    private void colorAzul1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorAzul1ActionPerformed
        JInternalFrame f = escritorio.getSelectedFrame();
        
        if(f!=null)
            if("VentanaInterna".equals(f.getClass().getSimpleName()))
                ((VentanaInterna)f).getLienzo2D().setColorR(Color.BLUE);
        
        colorRellenoActual.setBackground(Color.BLUE);
        setColorR(0,0,255);
        
        Trazo t = jList1.getSelectedValue();
        
        if(t!=null){
            t.setColorR(Color.BLUE);
            repaint();
        }
    }//GEN-LAST:event_colorAzul1ActionPerformed

    private void colorBlanco1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorBlanco1ActionPerformed
        JInternalFrame f = escritorio.getSelectedFrame();
        
        if(f!=null)
            if("VentanaInterna".equals(f.getClass().getSimpleName()))
                ((VentanaInterna)f).getLienzo2D().setColorR(Color.WHITE);
        
        colorRellenoActual.setBackground(Color.WHITE);
        setColorR(255,255,255);
        
        Trazo t = jList1.getSelectedValue();
        
        if(t!=null){
            t.setColorR(Color.WHITE);
            repaint();
        }
        
    }//GEN-LAST:event_colorBlanco1ActionPerformed

    private void colorAmarillo1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorAmarillo1ActionPerformed
        JInternalFrame f = escritorio.getSelectedFrame();
        
        if(escritorio.getSelectedFrame()!=null)
            if("VentanaInterna".equals(f.getClass().getSimpleName()))
                ((VentanaInterna)f).getLienzo2D().setColorR(Color.YELLOW);
        
        colorRellenoActual.setBackground(Color.YELLOW);
        setColorR(255,255,0);
        
        Trazo t = jList1.getSelectedValue();
        
        if(t!=null){
            t.setColorR(Color.YELLOW);
            repaint();
        }
    }//GEN-LAST:event_colorAmarillo1ActionPerformed

    private void colorVerde1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorVerde1ActionPerformed
        JInternalFrame f = escritorio.getSelectedFrame();
        
        if(escritorio.getSelectedFrame()!=null)
            if("VentanaInterna".equals(f.getClass().getSimpleName()))
                ((VentanaInterna)f).getLienzo2D().setColorR(Color.GREEN);
        
        colorRellenoActual.setBackground(Color.GREEN);
        setColorR(0,255,0);
        
        Trazo t = jList1.getSelectedValue();
        
        if(t!=null){
            t.setColorR(Color.GREEN);
            repaint();
        }
    }//GEN-LAST:event_colorVerde1ActionPerformed

    private void botonSinRellenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSinRellenoActionPerformed
        JInternalFrame f = escritorio.getSelectedFrame();
        
        if(f!=null)
            if("VentanaInterna".equals(f.getClass().getSimpleName()))
                ((VentanaInterna)f).getLienzo2D().setTipoR(TipoRelleno.EMPTY);
        
        Trazo t = jList1.getSelectedValue();
        
        if(t!=null){
            t.setTipoR(TipoRelleno.EMPTY);
            repaint();
        }
    }//GEN-LAST:event_botonSinRellenoActionPerformed

    private void botonGradienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGradienteActionPerformed
        JInternalFrame f = escritorio.getSelectedFrame();
        
        if(f!=null)
            if("VentanaInterna".equals(f.getClass().getSimpleName())){
                if(botonDV.isSelected())
                    ((VentanaInterna)f).getLienzo2D().setTipoR(TipoRelleno.D_VERTICAL);
                if(botonDH.isSelected())
                    ((VentanaInterna)f).getLienzo2D().setTipoR(TipoRelleno.D_HORIZONTAL);
                if(botonDD.isSelected())
                    ((VentanaInterna)f).getLienzo2D().setTipoR(TipoRelleno.D_DIAGONAL);
            }
        
        Trazo t = jList1.getSelectedValue();
        
        if(t!=null){
            if(botonDV.isSelected())
                 t.setTipoR(TipoRelleno.D_VERTICAL);
            if(botonDH.isSelected())
                 t.setTipoR(TipoRelleno.D_HORIZONTAL);
            if(botonDD.isSelected())
                 t.setTipoR(TipoRelleno.D_DIAGONAL);
            repaint();
        }       
    }//GEN-LAST:event_botonGradienteActionPerformed

    private void botonContinuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonContinuaActionPerformed
        JInternalFrame f = escritorio.getSelectedFrame();
        
        if(f!=null)
            if("VentanaInterna".equals(f.getClass().getSimpleName()))
                ((VentanaInterna)f).getLienzo2D().setTipoT(TipoTrazo.BASIC);
        
        Trazo t = jList1.getSelectedValue();
        
        if(t!=null){
            t.setTipoT(TipoTrazo.BASIC);
            repaint();
        }
    }//GEN-LAST:event_botonContinuaActionPerformed

    private void botonDiscontinuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonDiscontinuaActionPerformed
        JInternalFrame f = escritorio.getSelectedFrame();
        
        if(f!=null)
            if("VentanaInterna".equals(f.getClass().getSimpleName()))
                ((VentanaInterna)f).getLienzo2D().setTipoT(TipoTrazo.LINE);
        
        Trazo t = jList1.getSelectedValue();
        
        if(t!=null){
            t.setTipoT(TipoTrazo.LINE);
            repaint();
        }
        
    }//GEN-LAST:event_botonDiscontinuaActionPerformed

    private void botonPuntosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonPuntosActionPerformed
        JInternalFrame f = escritorio.getSelectedFrame();
        
        if(f!=null)
            if("VentanaInterna".equals(f.getClass().getSimpleName()))
                ((VentanaInterna)f).getLienzo2D().setTipoT(TipoTrazo.POINT);
        
        Trazo t = jList1.getSelectedValue();
        
        if(t!=null){
            t.setTipoT(TipoTrazo.POINT);
            repaint();
        }
        
    }//GEN-LAST:event_botonPuntosActionPerformed

    private void sliderTransparenciaStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderTransparenciaStateChanged
        JInternalFrame f = escritorio.getSelectedFrame();
        
        if(f!=null)
            if("VentanaInterna".equals(f.getClass().getSimpleName()))
                ((VentanaInterna)f).getLienzo2D().setTransparencia(sliderTransparencia.getValue()/100.0f);              
        
        Trazo t = jList1.getSelectedValue();
        
        if(t!=null){
            t.setTransparencia(sliderTransparencia.getValue()/100.0f);
            repaint();
        }
    }//GEN-LAST:event_sliderTransparenciaStateChanged

    private void colorTrazoActualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorTrazoActualActionPerformed
        JInternalFrame f = escritorio.getSelectedFrame();
        Color color = new Color(Integer.parseInt(textTR.getText()),
                                Integer.parseInt(textTG.getText()),
                                Integer.parseInt(textTB.getText())
                               );
                                               
        if(f!=null)
            if("VentanaInterna".equals(f.getClass().getSimpleName()))
                ((VentanaInterna)f).getLienzo2D().setColorT(color); 
        
        Trazo t = jList1.getSelectedValue();
        
        if(t!=null){
            t.setColorT(color);
            repaint();
        }
    }//GEN-LAST:event_colorTrazoActualActionPerformed

    private void colorRellenoActualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorRellenoActualActionPerformed
        JInternalFrame f = escritorio.getSelectedFrame();
        Color color = new Color(Integer.parseInt(textRR.getText()),
                                Integer.parseInt(textRG.getText()),
                                Integer.parseInt(textRB.getText())
                               );
                                               
        if(f!=null)
            if("VentanaInterna".equals(f.getClass().getSimpleName()))
                ((VentanaInterna)f).getLienzo2D().setColorR(color); 
        
        Trazo t = jList1.getSelectedValue();
        
        if(t!=null){
            t.setColorR(color);
            repaint();
        }
    }//GEN-LAST:event_colorRellenoActualActionPerformed

    private void textTRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textTRActionPerformed
        int r = 0;
        int g = 0;
        int b = 0;
        
        if(!(textTR.getText().equals("")))
            r = Integer.parseInt(textTR.getText());
        
        if(!(textTG.getText().equals("")))
            r = Integer.parseInt(textTG.getText());
        
        if(!(textTB.getText().equals("")))
            r = Integer.parseInt(textTB.getText());
        
        if(r>255) r = 255;
        else if(r < 0) r = 0;
        
        if(g>255) g = 255;
        else if(g < 0) g = 0;
        
        if(b>255) b = 255;
        else if(b < 0) b = 0;
        
        
        colorTrazoActual.setBackground(new Color(r,g,b));
        textTR.setText(Integer.toString(r));
        colorTrazoActualActionPerformed(evt); 
    }//GEN-LAST:event_textTRActionPerformed

    private void textTGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textTGActionPerformed
        int r = 0;
        int g = 0;
        int b = 0;
        
        if(!(textTR.getText().equals("")))
            r = Integer.parseInt(textTR.getText());
        
        if(!(textTG.getText().equals("")))
            r = Integer.parseInt(textTG.getText());
        
        if(!(textTB.getText().equals("")))
            r = Integer.parseInt(textTB.getText());
        
        if(r>255) r = 255;
        else if(r < 0) r = 0;
        
        if(g>255) g = 255;
        else if(g < 0) g = 0;
        
        if(b>255) b = 255;
        else if(b < 0) b = 0;
        
        
        colorTrazoActual.setBackground(new Color(r,g,b));
        textTG.setText(Integer.toString(g));
        colorTrazoActualActionPerformed(evt); 
    }//GEN-LAST:event_textTGActionPerformed

    private void textTBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textTBActionPerformed
        int r = 0;
        int g = 0;
        int b = 0;
        
        if(!(textTR.getText().equals("")))
            r = Integer.parseInt(textTR.getText());
        
        if(!(textTG.getText().equals("")))
            r = Integer.parseInt(textTG.getText());
        
        if(!(textTB.getText().equals("")))
            r = Integer.parseInt(textTB.getText());
        
        if(r>255) r = 255;
        else if(r < 0) r = 0;
        
        if(g>255) g = 255;
        else if(g < 0) g = 0;
        
        if(b>255) b = 255;
        else if(b < 0) b = 0;
        
        
        colorTrazoActual.setBackground(new Color(r,g,b));
        textTB.setText(Integer.toString(b));
        colorTrazoActualActionPerformed(evt); 
    }//GEN-LAST:event_textTBActionPerformed

    private void textRRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textRRActionPerformed
        int r = 0;
        int g = 0;
        int b = 0;
        
        if(!(textRR.getText().equals("")))
            r = Integer.parseInt(textRR.getText());
        
        if(!(textRG.getText().equals("")))
            r = Integer.parseInt(textRG.getText());
        
        if(!(textRB.getText().equals("")))
            r = Integer.parseInt(textRB.getText());
        
        if(r>255) r = 255;
        else if(r < 0) r = 0;
        
        if(g>255) g = 255;
        else if(g < 0) g = 0;
        
        if(b>255) b = 255;
        else if(b < 0) b = 0;
        
        
        colorRellenoActual.setBackground(new Color(r,g,b));
        textRR.setText(Integer.toString(r));
        colorTrazoActualActionPerformed(evt); 
    }//GEN-LAST:event_textRRActionPerformed

    private void textRGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textRGActionPerformed
        int r = 0;
        int g = 0;
        int b = 0;
        
        if(!(textRR.getText().equals("")))
            r = Integer.parseInt(textRR.getText());
        
        if(!(textRG.getText().equals("")))
            r = Integer.parseInt(textRG.getText());
        
        if(!(textRB.getText().equals("")))
            r = Integer.parseInt(textRB.getText());
        
        if(r>255) r = 255;
        else if(r < 0) r = 0;
        
        if(g>255) g = 255;
        else if(g < 0) g = 0;
        
        if(b>255) b = 255;
        else if(b < 0) b = 0;
        
        
        colorRellenoActual.setBackground(new Color(r,g,b));
        textRG.setText(Integer.toString(g));
        colorTrazoActualActionPerformed(evt);
    }//GEN-LAST:event_textRGActionPerformed

    private void textRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textRBActionPerformed
        int r = 0;
        int g = 0;
        int b = 0;
        
        if(!(textRR.getText().equals("")))
            r = Integer.parseInt(textRR.getText());
        
        if(!(textRG.getText().equals("")))
            r = Integer.parseInt(textRG.getText());
        
        if(!(textRB.getText().equals("")))
            r = Integer.parseInt(textRB.getText());
        
        if(r>255) r = 255;
        else if(r < 0) r = 0;
        
        if(g>255) g = 255;
        else if(g < 0) g = 0;
        
        if(b>255) b = 255;
        else if(b < 0) b = 0;
        
        
        colorRellenoActual.setBackground(new Color(r,g,b));
        textRB.setText(Integer.toString(b));
        colorTrazoActualActionPerformed(evt);
    }//GEN-LAST:event_textRBActionPerformed

    private void botonDHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonDHActionPerformed
        botonGradienteActionPerformed(evt);
    }//GEN-LAST:event_botonDHActionPerformed

    private void botonDVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonDVActionPerformed
        botonGradienteActionPerformed(evt);
    }//GEN-LAST:event_botonDVActionPerformed

    private void botonDDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonDDActionPerformed
        botonGradienteActionPerformed(evt);
    }//GEN-LAST:event_botonDDActionPerformed

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
        if (!evt.getValueIsAdjusting()){
            if(jList1.getModel().getSize()!=0){
                for(int i=0; i< jList1.getModel().getSize();i++){
                    jList1.getModel().getElementAt(i).setSeleccion(false);
                }
                if(jList1.getSelectedValue()!=null){
                    jList1.getSelectedValue().setSeleccion(true);
                    actualizarEntorno(jList1.getSelectedValue());
                    repaint();
                }
            }
        }   
    }//GEN-LAST:event_jList1ValueChanged

    private void botonNegativoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonNegativoActionPerformed
        JInternalFrame f = escritorio.getSelectedFrame();
        
        if(escritorio.getSelectedFrame()!=null)
            if("VentanaInterna".equals(f.getClass().getSimpleName())){
                VentanaInterna vi = (VentanaInterna) f;
                BufferedImage imgSource = vi.getLienzo2D().getImage();
                if(imgSource!=null){
                    try{
                        for(int i = 0; i<imgSource.getWidth(); i++)
                            for(int j = 0; j<imgSource.getHeight(); j++){
                                int p = imgSource.getRGB(i,j);
                                int a = (p>>24)&0xff;
                                int r = (p>>16)&0xff;
                                int g = (p>>8)&0xff;
                                int b = p&0xff;
                                r = 255 - r;
                                g = 255 - g;
                                b = 255 - b;
                                
                                p = (a << 24) | (r << 16) | (g << 8) | b;
                                imgSource.setRGB(i, j, p);
                            }

                        vi.getLienzo2D().repaint();
                    } catch(IllegalArgumentException e){
                        System.err.println(e.getLocalizedMessage());
                    }
                }
            }
    }//GEN-LAST:event_botonNegativoActionPerformed

    private void menuAcercaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAcercaActionPerformed
        JOptionPane.showMessageDialog(escritorio, "Programa: SMM_Final\nVersión: 1.0 \nAutor: Guillermo Sandoval Schmidt");
    }//GEN-LAST:event_menuAcercaActionPerformed

    private void botonDuplicadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonDuplicadoActionPerformed
        JInternalFrame f = escritorio.getSelectedFrame();
        
        if(escritorio.getSelectedFrame()!=null)
            if("VentanaInterna".equals(f.getClass().getSimpleName())){  
                VentanaInterna vi = new VentanaInterna();
                vi = (VentanaInterna)(escritorio.getSelectedFrame());
 
                BufferedImage imgSource;
                imgSource = ((vi.getLienzo2D())).getImage();

                if(imgSource != null){
                    
                        VentanaInterna ventana = new VentanaInterna();
                        ventana.getLienzo2D().setImage(imgSource);

                        escritorio.add(ventana);
                        ventana.setVisible(true);
                        ventana.setTitle("Copia");                  
                }
                escritorio.repaint();
            }
    }//GEN-LAST:event_botonDuplicadoActionPerformed

    private void menuListaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuListaActionPerformed
        jPanel29.setVisible(menuLista.isSelected());
        
        if(jPanel29.isVisible()) menuLista.setText("Ocultar lista de figuras");
        else menuLista.setText("Mostrar lista de figuras");
    }//GEN-LAST:event_menuListaActionPerformed

    private void menuAudioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAudioActionPerformed
        jToolBar4.setVisible(menuAudio.isSelected());
        
        if(jToolBar4.isVisible()) menuAudio.setText("Ocultar herramientas de audio y vídeo");
        else menuAudio.setText("Mostrar herramientas de audio y vídeo");
    }//GEN-LAST:event_menuAudioActionPerformed

    private void botonMoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonMoverActionPerformed
        Trazo t = jList1.getSelectedValue();
        if(t != null){
            JTextField fx = new JTextField(5);
            JTextField fy = new JTextField(5);

            JPanel myPanel = new JPanel();
            myPanel.add(new JLabel("Pos X:"));
            myPanel.add(fx);
            myPanel.add(new JLabel("Pos Y:"));
            myPanel.add(fy);

            int result = JOptionPane.showConfirmDialog(null, myPanel, 
                     "Nueva posición de la figura", JOptionPane.PLAIN_MESSAGE);
            if (result == JOptionPane.OK_OPTION) {

              Point p = new Point(t.getIni());
              
              if(!fx.getText().equals(""))
                  p.x = Integer.parseInt(fx.getText());
              if(!fy.getText().equals(""))       
                  p.y = Integer.parseInt(fy.getText());
              
              t.move(p);
              repaint();
            }
        }
    }//GEN-LAST:event_botonMoverActionPerformed

    private void botonBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBorrarActionPerformed
        JInternalFrame f = escritorio.getSelectedFrame();
        
        if(escritorio.getSelectedFrame()!=null)
            if(jList1.getModel().getSize()!=0){
                if(!jList1.isSelectionEmpty()){
                    int index = jList1.getSelectedIndex();
                    if("VentanaInterna".equals(f.getClass().getSimpleName())){
                        ((VentanaInterna)f).getLienzo2D().eliminar(jList1.getSelectedValue());
                        ((DefaultListModel)jList1.getModel()).remove(index);
                        repaint();
                    }
                }
        }
        
        
        
    }//GEN-LAST:event_botonBorrarActionPerformed

    private void actualizarEntorno(Trazo s){
        if(s!=null){

            //MODO DE DIBUJO
            GrupoFormas.clearSelection();       

            //COLOR TRAZO
            Color ct = s.getColorT();
            if(ct != null){
                GrupoColoresPrincipal.clearSelection();
                colorTrazoActual.setBackground(ct);
                colorTrazoActual.setSelected(true);

                int r = ct.getRed();
                int g = ct.getGreen();
                int b = ct.getBlue();

                textTR.setText(Integer.toString(r));
                textTG.setText(Integer.toString(g));
                textTB.setText(Integer.toString(b));
            }

            //COLOR Relleno
            Color cr = s.getColorR();
            if(cr != null){
                GrupoColoresSecundario.clearSelection();
                colorRellenoActual.setBackground(cr);
                colorRellenoActual.setSelected(true);

                int r = cr.getRed();
                int g = cr.getGreen();
                int b = cr.getBlue();

                textRR.setText(Integer.toString(r));
                textRG.setText(Integer.toString(g));
                textRB.setText(Integer.toString(b));
            }

            //TRANSPARENCIA
            sliderTransparencia.setValue((int) (s.getTransparencia()*100));

            //GROSOR TRAZO
            spinnerGrosor.setValue(s.getGrosor());

            //ALISADO
            botonAlisar.setSelected(s.isAlisado());

            //TIPO TRAZO
            TipoTrazo t = s.getTipo();
            switch(t){
                case BASIC:  
                    botonContinua.setSelected(true);
                break;
                case LINE:
                    botonDiscontinua.setSelected(true);
                break;
                case POINT:
                    botonPuntos.setSelected(true);
                break;
            }

            //TIPO RELLENO
            TipoRelleno tr = s.getTipoR();
            if(tr != null){
                switch(tr){
                    case EMPTY:
                        botonSinRelleno.setSelected(true);
                    break;
                    case PLAIN:
                        botonRelleno.setSelected(true);
                    break;
                    case D_VERTICAL:
                        botonGradiente.setSelected(true);
                        GrupoDegradado.clearSelection();
                        botonDV.setSelected(true);
                    break;
                    case D_HORIZONTAL:
                        botonGradiente.setSelected(true);
                        GrupoDegradado.clearSelection();
                        botonDH.setSelected(true);
                    break;
                    case D_DIAGONAL:
                        botonGradiente.setSelected(true);
                        GrupoDegradado.clearSelection();
                        botonDD.setSelected(true);
                    break;
                }

                actualizar((VentanaInterna)escritorio.getSelectedFrame());
            }
        }

    }
    
    private LookupTable seno(double w){
        byte data[] = new byte[256];
        
        for(int i=0; i<256; i++){
            data[i] = (byte)(255.0*(Math.abs(Math.sin(Math.toRadians(i*w)))));
        }
        
        ByteLookupTable t = new ByteLookupTable(0, data);
        return t;
    }
    
        private LookupTable cos(double w){
        byte data[] = new byte[256];
        
        for(int i=0; i<256; i++){
            data[i] = (byte)(255.0*(Math.abs(Math.cos(Math.toRadians(i*w)))));
        }
        
        ByteLookupTable t = new ByteLookupTable(0, data);
        return t;
    }
    
    private LookupTable look(double w){
        byte data[] = new byte[256];

        for(int i=0; i<256; i++){
            data[i] = (byte)(255.0*(Math.abs(Math.sin(Math.toRadians(i*w))))*(Math.abs(Math.cos(Math.toRadians(i*w)))));
        }

        ByteLookupTable t = new ByteLookupTable(0, data);
        return t;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaPrincipal().setVisible(true);
            }
        });
    }
    
    public class ManejadorAddShape extends LienzoAdapter{
        public void shapeAdded(LienzoEvent evt){
            ((DefaultListModel)jList1.getModel()).addElement(evt.getShape());   
        }
    }
    
    

    ManejadorAddShape manejador = new ManejadorAddShape();
    private BufferedImage imgSource=null;
    private BufferedImage imgAux=null;
    
    SMPlayer player = null;
    SMSoundRecorder recorder = null;
    
    File auxAudio = null;
    
    VentanaInternaCamara cam = null;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup GrupoColoresPrincipal;
    private javax.swing.ButtonGroup GrupoColoresSecundario;
    private javax.swing.ButtonGroup GrupoDegradado;
    private javax.swing.ButtonGroup GrupoFormas;
    private javax.swing.ButtonGroup GrupoRelleno;
    private javax.swing.ButtonGroup GrupoTrazo;
    private javax.swing.JMenuBar barraMenu;
    private javax.swing.JButton boton180;
    private javax.swing.JButton boton270;
    private javax.swing.JButton boton90;
    private javax.swing.JToggleButton botonAlisar;
    private javax.swing.JButton botonAumentar;
    private javax.swing.JButton botonBandas;
    private javax.swing.JButton botonBorrar;
    private javax.swing.JToggleButton botonCamara;
    private javax.swing.JToggleButton botonCaptura;
    private javax.swing.JToggleButton botonContinua;
    private javax.swing.JRadioButton botonCosSin;
    private javax.swing.JRadioButton botonCoseno;
    private javax.swing.JRadioButton botonDD;
    private javax.swing.JRadioButton botonDH;
    private javax.swing.JRadioButton botonDV;
    private javax.swing.JToggleButton botonDiscontinua;
    private javax.swing.JButton botonDuplicado;
    private javax.swing.JToggleButton botonGradiente;
    private javax.swing.JButton botonIluminar;
    private javax.swing.JToggleButton botonLinea;
    private javax.swing.JButton botonMover;
    private javax.swing.JButton botonNegativo;
    private javax.swing.JButton botonNormal;
    private javax.swing.JButton botonOscurecer;
    private javax.swing.JToggleButton botonOvalo;
    private javax.swing.JButton botonPlay;
    private javax.swing.JToggleButton botonPuntos;
    private javax.swing.JButton botonRecord;
    private javax.swing.JToggleButton botonRectangulo;
    private javax.swing.JButton botonReducir;
    private javax.swing.JToggleButton botonRelleno;
    private javax.swing.JRadioButton botonSeno;
    private javax.swing.JToggleButton botonSinRelleno;
    private javax.swing.JButton botonSinusoidal;
    private javax.swing.JButton botonStop;
    private javax.swing.JToggleButton colorAmarillo;
    private javax.swing.JToggleButton colorAmarillo1;
    private javax.swing.JToggleButton colorAzul;
    private javax.swing.JToggleButton colorAzul1;
    private javax.swing.JToggleButton colorBlanco;
    private javax.swing.JToggleButton colorBlanco1;
    private javax.swing.JToggleButton colorNegro;
    private javax.swing.JToggleButton colorNegro1;
    private javax.swing.JToggleButton colorRellenoActual;
    private javax.swing.JToggleButton colorRojo;
    private javax.swing.JToggleButton colorRojo1;
    private javax.swing.JToggleButton colorTrazoActual;
    private javax.swing.JToggleButton colorVerde;
    private javax.swing.JToggleButton colorVerde1;
    private javax.swing.JDesktopPane escritorio;
    private javax.swing.ButtonGroup grupoSinusoidal;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JList<Trazo> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JToolBar.Separator jSeparator6;
    private javax.swing.JToolBar.Separator jSeparator7;
    private javax.swing.JToolBar.Separator jSeparator8;
    private javax.swing.JSeparator jSeparator9;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JSlider jSlider2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JToolBar jToolBar4;
    private javax.swing.JComboBox<File> listaReproduccion;
    private javax.swing.JMenuItem menuAcerca;
    private javax.swing.JMenu menuArchivo;
    private javax.swing.JCheckBoxMenuItem menuAudio;
    private javax.swing.JMenu menuAyuda;
    private javax.swing.JCheckBoxMenuItem menuGraficos;
    private javax.swing.JCheckBoxMenuItem menuImagen;
    private javax.swing.JMenuItem menuItemAbrir;
    private javax.swing.JMenuItem menuItemGuardar;
    private javax.swing.JMenuItem menuItemNuevo;
    private javax.swing.JCheckBoxMenuItem menuLista;
    private javax.swing.JCheckBoxMenuItem menuStatusBar;
    private javax.swing.JMenu menuVer;
    private javax.swing.JLabel nombreHerramienta;
    private javax.swing.JSlider sliderTransparencia;
    private javax.swing.JSpinner spinnerGrosor;
    private javax.swing.JTextField textRB;
    private javax.swing.JTextField textRG;
    private javax.swing.JTextField textRR;
    private javax.swing.JTextField textTB;
    private javax.swing.JTextField textTG;
    private javax.swing.JTextField textTR;
    // End of variables declaration//GEN-END:variables
}
